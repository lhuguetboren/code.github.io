{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"GET-POST","text":""},{"location":"#1-teoria-getpost","title":"1. Teoria GetPost","text":"<ul> <li>Conceptos b\u00e1sicos</li> </ul>"},{"location":"#2-practica-getpost","title":"2. Pr\u00e1ctica GetPost","text":"<ul> <li>Pr\u00e1ctica b\u00e1sica</li> </ul>"},{"location":"#3-publicacion-alta-y-gestion-de-un-juego-online","title":"3. Publicaci\u00f3n, alta y gesti\u00f3n de un juego online","text":"<ul> <li>Desarrollo para publicar y realizar juegos online</li> <li>Estructura BBDe</li> </ul>"},{"location":"c_publicacion_bbdd/","title":"BBDD Publicaci\u00f3n","text":"<p>Aqu\u00ed tienes la estructura de la base de datos para el proyecto. Se usar\u00e1 MySQL (pero tambi\u00e9n puede adaptarse a PostgreSQL, SQLite o MongoDB).</p> <p>\u2e3b</p> <p>\ud83d\udccc Base de Datos: juegos_db</p> <p>Esta base de datos manejar\u00e1 jugadores, partidas y rankings.</p> <p>\ud83d\udcc2 1\ufe0f\u20e3 Tabla jugadores</p> <p>Guarda la informaci\u00f3n de los jugadores registrados.</p> <p>CREATE TABLE jugadores (     id INT AUTO_INCREMENT PRIMARY KEY,     nombre VARCHAR(50) UNIQUE NOT NULL,     email VARCHAR(100) NOT NULL UNIQUE,     fecha_registro TIMESTAMP DEFAULT CURRENT_TIMESTAMP );</p> <p>\u2705 Campos:     \u2022   id: Identificador \u00fanico del jugador.     \u2022   nombre: Nombre del jugador.     \u2022   email: Correo del jugador (evita duplicados).     \u2022   fecha_registro: Fecha de registro (autom\u00e1tica).</p> <p>\u2e3b</p> <p>\ud83d\udcc2 2\ufe0f\u20e3 Tabla partidas</p> <p>Registra cada partida jugada por los jugadores.</p> <p>CREATE TABLE partidas (     id INT AUTO_INCREMENT PRIMARY KEY,     jugador_id INT NOT NULL,     puntuacion INT NOT NULL,     tiempo_juego INT NOT NULL,      fecha TIMESTAMP DEFAULT CURRENT_TIMESTAMP,     FOREIGN KEY (jugador_id) REFERENCES jugadores(id) ON DELETE CASCADE );</p> <p>\u2705 Campos:     \u2022   id: Identificador \u00fanico de la partida.     \u2022   jugador_id: Jugador que jug\u00f3 la partida (relaci\u00f3n con jugadores).     \u2022   puntuacion: Puntos obtenidos en la partida.     \u2022   tiempo_juego: Tiempo total de juego en segundos.     \u2022   fecha: Fecha de la partida.</p> <p>\ud83d\udd39 Si se borra un jugador, sus partidas tambi\u00e9n se eliminar\u00e1n autom\u00e1ticamente.</p> <p>\u2e3b</p> <p>\ud83d\udcc2 3\ufe0f\u20e3 Tabla ranking (Vista de Mejores Jugadores)</p> <p>Este ranking mostrar\u00e1 el top 10 jugadores con la mejor puntuaci\u00f3n.</p> <p>CREATE VIEW ranking AS SELECT jugadores.nombre, MAX(partidas.puntuacion) AS mejor_puntuacion, COUNT(partidas.id) AS total_partidas FROM jugadores JOIN partidas ON jugadores.id = partidas.jugador_id GROUP BY jugadores.id ORDER BY mejor_puntuacion DESC LIMIT 10;</p> <p>\u2705 Campos:     \u2022   nombre: Nombre del jugador.     \u2022   mejor_puntuacion: Su mayor puntuaci\u00f3n registrada.     \u2022   total_partidas: Cantidad de partidas jugadas.</p> <p>\ud83d\udd39 Se actualiza autom\u00e1ticamente con cada nueva partida.</p> <p>\u2e3b</p> <p>\ud83d\udccc Resumen de Relaciones</p> <p>jugadores (1) \u2b0c (\u221e) partidas jugadores (1) \u2b0c (1) ranking</p> <p>\u2714 Un jugador puede tener muchas partidas registradas. \u2714 La vista ranking muestra a los mejores jugadores autom\u00e1ticamente.</p> <p>\u2e3b</p> <p>\ud83d\ude80 Conclusi\u00f3n</p> <p>\u2705 Base de datos sencilla y escalable. \u2705 Permite registrar jugadores y almacenar partidas. \u2705 Ranking din\u00e1mico basado en la mejor puntuaci\u00f3n.</p> <p>\ud83d\udd39 Esta estructura soporta futuras expansiones, como logros, niveles o estad\u00edsticas avanzadas. \ud83c\udfae\ud83d\udd25</p>"},{"location":"c_publicacion_proyecto/","title":"Proyecto: Publicaci\u00f3n de Juegos en la Web con Base de Datos Compartida","text":"<p>Objetivo del Proyecto</p> <p>El prop\u00f3sito de este proyecto es que cada alumno cree su propio juego en Unity, lo publique en la web y lo conecte a una base de datos com\u00fan donde se registrar\u00e1n los jugadores y sus puntuaciones.</p> <p>Cada juego estar\u00e1 disponible en GitHub Pages y permitir\u00e1:</p> <p>\u2714 Registrar jugadores en una base de datos central.</p> <p>\u2714 Permitir que nuevos jugadores se den de alta desde cualquier juego.</p> <p>\u2714 Guardar las estad\u00edsticas de partidas y puntuaciones.</p> <p>\u2714 Consultar un ranking global de jugadores.</p> <p>\u2e3b</p>"},{"location":"c_publicacion_proyecto/#creacion-del-juego-en-unity","title":"Creaci\u00f3n del Juego en Unity","text":"<p>Un sistema de puntuaciones. Un formulario para ingresar el nombre del jugador. Un bot\u00f3n para enviar la puntuaci\u00f3n a la base de datos. Una pantalla de ranking donde se muestren las mejores puntuaciones.</p> <p>\u2e3b</p>"},{"location":"c_publicacion_proyecto/#exportacion-a-webgl-y-publicacion-en-github-pages","title":"Exportaci\u00f3n a WebGL y Publicaci\u00f3n en GitHub Pages","text":"<p>\u00bfPor qu\u00e9 WebGL?</p> <ul> <li>Nos permite jugar directamente desde el navegador sin instalar nada.</li> <li>Podemos compartir nuestros juegos f\u00e1cilmente.</li> <li>Es ideal para demostrar proyectos en l\u00ednea.</li> </ul> <p>Pasos para publicar el juego en GitHub Pages</p> <ol> <li>En Unity, cambiar la plataforma del juego a WebGL (File \u2192 Build Settings).</li> <li>Exportar el juego (Build and Run).</li> <li> <p>Subir los archivos exportados a GitHub:</p> </li> <li> <p>Crear un repositorio en GitHub.</p> </li> <li> <p>Subir la carpeta del juego (/Build/ y index.html).</p> </li> <li> <p>Habilitar GitHub Pages en Settings \u2192 Pages.</p> </li> <li>Acceder al juego online con la URL generada:</li> </ol> <p>https://tuusuario.github.io/nombre-del-juego/</p> <p>\u2e3b</p>"},{"location":"c_publicacion_proyecto/#creacion-de-la-base-de-datos","title":"Creaci\u00f3n de la Base de Datos","text":"<p>Todos los juegos estar\u00e1n conectados a una base de datos compartida donde se guardar\u00e1n:</p> <ul> <li>Los jugadores registrados (nombre y correo).</li> <li>Las partidas jugadas (qui\u00e9n jug\u00f3, puntuaci\u00f3n y fecha).</li> <li>Un ranking global con los mejores jugadores.</li> </ul> <p>La base de datos estar\u00e1 en un servidor externo y los juegos se comunicar\u00e1n con ella a trav\u00e9s de una API (Interfaz de Programaci\u00f3n de Aplicaciones).</p> <p>\u2e3b</p>"},{"location":"c_publicacion_proyecto/#conexion-del-juego-con-la-base-de-datos","title":"Conexi\u00f3n del Juego con la Base de Datos","text":"<p>Cada juego se conectar\u00e1 a la base de datos a trav\u00e9s de peticiones HTTP:</p> <ul> <li>Para registrar un jugador:</li> <li>El jugador ingresa su nombre y correo.</li> <li>Se guarda en la base de datos central.</li> <li>Para guardar una puntuaci\u00f3n:</li> <li>Al terminar una partida, el juego env\u00eda la puntuaci\u00f3n a la base de datos.</li> <li>Para consultar el ranking:</li> <li>El juego solicita la lista de los mejores jugadores y la muestra en pantalla.</li> </ul> <p>Ejemplo de flujo de datos:</p> <ol> <li>El jugador inicia el juego y se registra.</li> <li>El jugador juega una partida y obtiene una puntuaci\u00f3n.</li> <li>El juego env\u00eda la puntuaci\u00f3n al servidor.</li> <li>El juego muestra el ranking actualizado con los mejores jugadores.</li> </ol> <p>\u2e3b</p>"},{"location":"c_publicacion_proyecto/#consulta-de-puntuaciones-y-estadisticas","title":"Consulta de Puntuaciones y Estad\u00edsticas","text":"<p>Cada juego incluir\u00e1 un ranking global donde los jugadores podr\u00e1n ver:</p> <ul> <li>Las mejores puntuaciones del d\u00eda.</li> <li>El top 10 de jugadores.</li> <li>Sus propias estad\u00edsticas de juego.</li> </ul> <p>Esto permitir\u00e1 que los alumnos analicen datos y comparen sus puntuaciones con otros compa\u00f1eros.</p> <p>\u2e3b</p>"},{"location":"c_publicacion_proyecto/#beneficios-del-proyecto","title":"Beneficios del Proyecto","text":"<p>\u2714 Publicaci\u00f3n en la web: Cada alumno tendr\u00e1 su propio juego accesible desde cualquier dispositivo. \u2714 Trabajo con bases de datos: Aprender\u00e1n c\u00f3mo los juegos guardan informaci\u00f3n en servidores. \u2714 Conexi\u00f3n con APIs: Experimentar\u00e1n con el env\u00edo y recepci\u00f3n de datos entre Unity y un servidor. \u2714 Competencia amistosa: Los alumnos podr\u00e1n ver sus rankings y competir de manera saludable. \u2714 Desarrollo de habilidades clave: Dise\u00f1o de juegos, integraci\u00f3n con la web y manejo de datos.</p> <p>\u2e3b</p>"},{"location":"c_publicacion_proyecto/#entregables-finales","title":"Entregables Finales","text":"<p>Cada alumno deber\u00e1 entregar: Un juego funcional publicado en GitHub Pages. El juego debe permitir registrar jugadores y enviar puntuaciones. Debe mostrar el ranking de jugadores de la base de datos com\u00fan. Un breve informe explicando el desarrollo y los desaf\u00edos enfrentados.</p> <p>\u2e3b</p>"},{"location":"c_publicacion_proyecto/#conclusion","title":"Conclusi\u00f3n","text":"<p>Al finalizar este proyecto, cada alumno tendr\u00e1 un juego publicado en la web y conectado a una base de datos real, permitiendo una experiencia m\u00e1s interactiva y competitiva. \u00a1Es un gran paso para aprender sobre juegos online y sistemas de datos en la nube! </p>"},{"location":"p_getpost/","title":"Practica GETPOST","text":"<ol> <li>GET Request (<code>localhost/api/Unityget</code>)</li> <li> <p>Fetches data from the API and displays it in the UI.</p> </li> <li> <p>POST Request (<code>localhost/api/Unitypost</code>)</p> </li> <li> <p>Sends user input to the API.</p> </li> <li> <p>Basic UI Elements</p> </li> <li>Input Field (for entering data to send via <code>POST</code>).</li> <li>Buttons (for sending GET and POST requests).</li> <li>Text Area (for displaying received data).</li> </ol>"},{"location":"p_getpost/#scene-setup-in-unity","title":"Scene Setup in Unity","text":"<ol> <li>Create a new Unity UI Canvas:</li> <li>Right-click in the Hierarchy \u2192 UI \u2192 Canvas.</li> <li> <p>Set Canvas Scaler to Scale With Screen Size.</p> </li> <li> <p>Add UI Elements:</p> </li> <li>Text (<code>responseText</code>):<ul> <li>Right-click Canvas \u2192 UI \u2192 Text.</li> <li>Change its name to <code>ResponseText</code>.</li> <li>Set Text to <code>\"Response: \"</code> (empty by default).</li> <li>Assign it in the <code>APIManager</code> script.</li> </ul> </li> <li>InputField (<code>inputField</code> for POST data):<ul> <li>Right-click Canvas \u2192 UI \u2192 Input Field.</li> <li>Rename it to <code>InputField</code>.</li> <li>Assign it in the script.</li> </ul> </li> <li> <p>Buttons:</p> <ul> <li>GET Button:</li> <li>Right-click Canvas \u2192 UI \u2192 Button.</li> <li>Rename to <code>GetButton</code>, set text to <code>\"GET Data\"</code>.</li> <li>Add OnClick Event, assign <code>APIManager.GetRequest</code>.</li> <li>POST Button:</li> <li>Right-click Canvas \u2192 UI \u2192 Button.</li> <li>Rename to <code>PostButton</code>, set text to <code>\"POST Data\"</code>.</li> <li>Add OnClick Event, assign <code>APIManager.PostRequest</code>.</li> </ul> </li> <li> <p>Attach the Script:</p> </li> <li>Create an empty GameObject in the scene and rename it to <code>APIManager</code>.</li> <li>Attach the <code>APIManager</code> script.</li> <li> <p>Drag the InputField and ResponseText into the script fields in the Inspector.</p> </li> <li> <p>Run &amp; Test:</p> </li> <li>Play the scene and use the UI buttons to send API requests.</li> </ol>"},{"location":"p_getpost/#logica-csharp","title":"L\u00f3gica CSHARP","text":"<pre><code>graph TD;\n    A[Usuario] --&gt;|Hace clic en GET| B[\"GetRequest\"]\n    B --&gt; C[StartCoroutine GetData]\n    C --&gt; D[\"UnityWebRequest.Get (url)\"]\n    D --&gt;|Env\u00eda solicitud| E[\"API (localhost/api/Unityget)\"]\n    E --&gt;|Devuelve respuesta| F[webRequest.downloadHandler.text]\n    F --&gt; G[Actualiza UI con la respuesta]\n\n    A --&gt;|Hace clic en POST| H[PostRequest]\n    H --&gt; I[\"StartCoroutine(PostData(inputField.text))\"]\n    I --&gt; J[Crea formulario WWWForm]\n    J --&gt; K[\"UnityWebRequest.Post(url, form)\"]\n    K --&gt;|Env\u00eda datos| L[\"API (localhost/api/Unitypost)\"]\n    L --&gt;|Devuelve respuesta| M[webRequest.downloadHandler.text]\n    M --&gt; N[Actualiza UI con la respuesta]</code></pre> <p>Explicaci\u00f3n del Diagrama</p> <ol> <li>GET Request:</li> <li>El usuario presiona el bot\u00f3n GET.</li> <li>Se ejecuta <code>GetRequest()</code>, que inicia <code>StartCoroutine(GetData())</code>.</li> <li>UnityWebRequest env\u00eda una solicitud GET a <code>localhost/api/Unityget</code>.</li> <li> <p>La API devuelve una respuesta que se muestra en la UI.</p> </li> <li> <p>POST Request:</p> </li> <li>El usuario ingresa datos y presiona el bot\u00f3n POST.</li> <li>Se ejecuta <code>PostRequest()</code>, que inicia <code>StartCoroutine(PostData())</code>.</li> <li>Se crea un formulario <code>WWWForm</code> con los datos del usuario.</li> <li>UnityWebRequest env\u00eda una solicitud POST a <code>localhost/api/Unitypost</code>.</li> <li>La API devuelve una respuesta que se muestra en la UI.</li> </ol>"},{"location":"p_getpost/#codigo-csharp","title":"C\u00d3DIGO CSHARP","text":"<p>```CSHARP</p> <p>using System.Collections; using UnityEngine; using UnityEngine.Networking; using UnityEngine.UI;</p> <p>public class APIManager : MonoBehaviour {     // URLs for GET and POST requests     public string getUrl = \"http://localhost/api/Unityget\";     public string postUrl = \"http://localhost/api/Unitypost\";</p> <pre><code>// UI Elements: Input field for POST request and a text field to display responses\npublic InputField inputField;\npublic Text responseText;\n\n// Method triggered when GET button is clicked\npublic void GetRequest()\n{\n    Debug.Log(\"Starting GET request to: \" + getUrl);\n    StartCoroutine(GetData()); // Start the coroutine to fetch data from the API\n}\n\nIEnumerator GetData()\n{\n    // Create a GET request\n    using (UnityWebRequest webRequest = UnityWebRequest.Get(getUrl))\n    {\n        yield return webRequest.SendWebRequest(); // Send the request and wait for response\n\n        if (webRequest.result == UnityWebRequest.Result.Success)\n        {\n            Debug.Log(\"GET request successful. Response: \" + webRequest.downloadHandler.text);\n            // Display the response text in the UI\n            responseText.text = \"Response: \" + webRequest.downloadHandler.text;\n        }\n        else\n        {\n            Debug.LogError(\"GET request failed. Error: \" + webRequest.error);\n            // Display error message if request fails\n            responseText.text = \"Error: \" + webRequest.error;\n        }\n    }\n}\n\n// Method triggered when POST button is clicked\npublic void PostRequest()\n{\n    Debug.Log(\"Starting POST request to: \" + postUrl + \" with data: \" + inputField.text);\n    StartCoroutine(PostData(inputField.text)); // Start coroutine to send data to the API\n}\n\nIEnumerator PostData(string jsonData)\n{\n    // Create a form and add input data\n    WWWForm form = new WWWForm();\n    form.AddField(\"data\", jsonData);\n\n    // Create a POST request with form data\n    using (UnityWebRequest webRequest = UnityWebRequest.Post(postUrl, form))\n    {\n        yield return webRequest.SendWebRequest(); // Send request and wait for response\n\n        if (webRequest.result == UnityWebRequest.Result.Success)\n        {\n            Debug.Log(\"POST request successful. Response: \" + webRequest.downloadHandler.text);\n            // Display the response received from the server\n            responseText.text = \"Response: \" + webRequest.downloadHandler.text;\n        }\n        else\n        {\n            Debug.LogError(\"POST request failed. Error: \" + webRequest.error);\n            // Display error message if request fails\n            responseText.text = \"Error: \" + webRequest.error;\n        }\n    }\n}\n</code></pre> <p>} ````</p>"},{"location":"p_getpost/#ejercicio-1-obtener-y-mostrar-datos-desde-una-api","title":"Ejercicio 1: Obtener y Mostrar Datos desde una API","text":"<p>Objetivo: Practicar la obtenci\u00f3n de datos desde una API y mostrarlos en la UI.</p> <p>Instrucciones:</p> <ol> <li> <p>Modifica el c\u00f3digo <code>APIManager</code> para obtener datos de la API en formato JSON.</p> </li> <li> <p>La API devolver\u00e1 un objeto con la estructura:</p> </li> </ol> <p><code>{        \"message\": \"\u00a1Hola, mundo!\",        \"status\": 200    }</code></p> <ol> <li>Extrae y muestra solo el mensaje en un Text de Unity.</li> </ol> <p>Pistas:</p> <ul> <li>Usa <code>JsonUtility.FromJson&lt;T&gt;()</code> para deserializar el JSON en un objeto de C#.</li> <li>Crea una clase que represente la estructura del JSON.</li> </ul>"},{"location":"p_getpost/#ejercicio-2-enviar-datos-en-formato-json","title":"Ejercicio 2: Enviar Datos en Formato JSON","text":"<p>Objetivo: Practicar el env\u00edo de datos en formato JSON mediante un <code>POST</code>.</p> <p>Instrucciones:</p> <ol> <li>Modifica la funci\u00f3n <code>PostRequest()</code> para enviar los datos en formato JSON en lugar de usar <code>WWWForm</code>.</li> <li>Env\u00eda un JSON con la estructura:</li> </ol> <p><code>{        \"username\": \"Alumno123\",        \"score\": 100    }</code></p> <ol> <li>Muestra en la UI la respuesta de la API.</li> </ol> <p>Pistas:</p> <ul> <li>Usa <code>JsonUtility.ToJson()</code> para convertir un objeto C# en JSON.</li> <li>Usa <code>webRequest.uploadHandler</code> para enviar el JSON en el <code>POST</code>.</li> </ul>"},{"location":"p_getpost/#ejercicio-3-autenticacion-con-token-y-manejo-de-errores","title":"Ejercicio 3: Autenticaci\u00f3n con Token y Manejo de Errores","text":"<p>Objetivo: Implementar un sistema de autenticaci\u00f3n simple usando un token de acceso.</p> <p>Instrucciones:</p> <ol> <li>Simula un inicio de sesi\u00f3n enviando un <code>POST</code> a <code>localhost/api/login</code> coN</li> </ol> <p><code>{        \"username\": \"Alumno123\",        \"password\": \"clave123\"    }</code></p> <ol> <li>La API devolver\u00e1 un token en la respuesta:</li> </ol> <p><code>{        \"token\": \"abc123xyz\"    }</code></p> <ol> <li>Guarda el token y \u00fasalo para futuras solicitudes <code>GET</code> a\u00f1adi\u00e9ndolo al header de la petici\u00f3n como <code>Authorization: Bearer {token}</code>.</li> </ol> <p>Pistas:</p> <ul> <li>Usa <code>webRequest.SetRequestHeader(\"Authorization\", \"Bearer \" + token)</code> para enviar el token en futuras peticiones.</li> <li>Usa <code>PlayerPrefs.SetString(\"token\", token)</code> para guardar el token localmente.</li> </ul>"},{"location":"p_getpost/#extras","title":"Extras:","text":"<ul> <li>Agrega un temporizador para mostrar mensajes de error si el servidor no responde en 5 segundos.</li> <li>Implementar barra de carga mientras se hace la petici\u00f3n.</li> </ul>"},{"location":"p_getpost/#glosario-de-comandos-y-metodos","title":"Glosario de Comandos y M\u00e9todos","text":""},{"location":"p_getpost/#1-manejo-de-corrutinas","title":"1. Manejo de Corrutinas","text":"<ul> <li><code>StartCoroutine(GetData());</code> \u2192 Inicia una corrutina para ejecutar una tarea en paralelo (ideal para llamadas de red as\u00edncronas).</li> <li><code>IEnumerator GetData()</code> \u2192 Define una corrutina que ejecuta c\u00f3digo en m\u00faltiples frames sin bloquear el juego.</li> <li><code>yield return webRequest.SendWebRequest();</code> \u2192 Espera la respuesta de la solicitud HTTP antes de continuar la ejecuci\u00f3n.</li> </ul>"},{"location":"p_getpost/#2-envio-y-recepcion-de-peticiones-http","title":"2. Env\u00edo y Recepci\u00f3n de Peticiones HTTP","text":"<ul> <li><code>UnityWebRequest.Get(url);</code> \u2192 Crea una solicitud GET para obtener datos de un servidor.</li> <li><code>UnityWebRequest.Post(url, form);</code> \u2192 Crea una solicitud POST para enviar datos al servidor.</li> <li><code>webRequest.SendWebRequest();</code> \u2192 Env\u00eda la solicitud y espera una respuesta.</li> <li><code>webRequest.result == UnityWebRequest.Result.Success</code> \u2192 Comprueba si la solicitud fue exitosa.</li> <li><code>webRequest.downloadHandler.text</code> \u2192 Obtiene la respuesta del servidor en formato de texto.</li> <li><code>webRequest.error</code> \u2192 Devuelve un mensaje de error si la solicitud falla.</li> </ul>"},{"location":"p_getpost/#3-manejo-de-formularios","title":"3. Manejo de Formularios","text":"<ul> <li><code>WWWForm form = new WWWForm();</code> \u2192 Crea un formulario para enviar datos mediante <code>POST</code>.</li> <li><code>form.AddField(\"data\", jsonData);</code> \u2192 Agrega un campo con datos al formulario.</li> </ul>"},{"location":"p_getpost/#4-depuracion-y-registros-en-la-consola","title":"4. Depuraci\u00f3n y Registros en la Consola","text":"<ul> <li><code>Debug.Log(\"Mensaje\");</code> \u2192 Imprime un mensaje en la consola de Unity (para debug).</li> <li><code>Debug.LogError(\"Mensaje de error\");</code> \u2192 Imprime un mensaje de error en la consola de Unity.</li> </ul>"},{"location":"p_getpost/#5-ui-en-unity","title":"5. UI en Unity","text":"<ul> <li><code>public InputField inputField;</code> \u2192 Define un campo de entrada de texto en la interfaz.</li> <li><code>public Text responseText;</code> \u2192 Define un campo de texto donde se mostrar\u00e1 la respuesta.</li> <li><code>responseText.text = \"Response: \" + webRequest.downloadHandler.text;</code> \u2192 Actualiza el texto en la interfaz con la respuesta del servidor.</li> </ul>"},{"location":"p_getpost/#php","title":"PHP","text":"<p>Archivo PHP para que maneje dos salidas en GET:</p> <ul> <li>Texto plano si se pasa ?format=text en la URL.</li> <li>JSON por defecto si no se especifica el formato.</li> </ul> <p>Para POST:</p> <ul> <li>Devolver JSON con los datos recibidos.</li> </ul> <p>```PHP &lt;?php</p> <p>// Set default response header to JSON format header(\"Content-Type: application/json\");</p> <p>// Define an associative array to store the response $response = array();</p> <p>// Determine the request method used by the client $method = $_SERVER['REQUEST_METHOD'];</p> <p>if ($method === 'GET') {     // Check if a specific response format is requested in the URL parameters (e.g., ?format=json or ?format=text)     $format = $_GET['format'] ?? 'json';</p> <pre><code>if ($format === 'text') {\n    // If 'text' format is requested, return a plain text response\n    header(\"Content-Type: text/plain\");\n    echo \"GET request received successfully!\";\n} else {\n    // Default response format is JSON\n    $response[\"message\"] = \"GET request received successfully!\";\n    $response[\"status\"] = 200;\n\n    // Convert the response array into a JSON string and send it to the client\n    echo json_encode($response);\n}\n</code></pre> <p>} elseif ($method === 'POST') {     // Handling POST request     // Retrieve data from the POST request, defaulting to \"No data received\" if not provided     $postData = $_POST[\"data\"] ?? \"No data received\";</p> <pre><code>// Prepare response\n$response[\"message\"] = \"POST request received successfully!\";\n$response[\"received_data\"] = $postData; // Include the received data in the response\n$response[\"status\"] = 200;\n\n// Convert the response array into a JSON string and send it to the client\necho json_encode($response);\n</code></pre> <p>}  else {     // Handling unsupported request methods (e.g., PUT, DELETE, etc.)     http_response_code(405); // Set HTTP status code to 405 (Method Not Allowed)     $response[\"error\"] = \"Method not allowed\";</p> <pre><code>// Convert the response array into a JSON string and send it to the client\necho json_encode($response);\n</code></pre> <p>}</p> <p>?&gt;```</p>"},{"location":"t_getpost/","title":"Peticiones GET y POST en Unity, manejo de respuestas JSON, y Network Transport**.","text":""},{"location":"t_getpost/#1-peticiones-get-en-unity","title":"1. Peticiones GET en Unity","text":""},{"location":"t_getpost/#concepto","title":"Concepto","text":"<p>Una petici\u00f3n GET se usa para solicitar informaci\u00f3n desde un servidor. En Unity, esto se realiza con <code>UnityWebRequest.Get</code>.</p>"},{"location":"t_getpost/#codigo-base","title":"C\u00f3digo Base","text":"<pre><code>using UnityEngine;\nusing UnityEngine.Networking;\nusing System.Collections;\n\npublic class PeticionGET : MonoBehaviour\n{\n    public void ClickEnviarGet()\n    {\n        StartCoroutine(EnviarGet());\n    }\n\n    IEnumerator EnviarGet()\n    {\n        UnityWebRequest www = UnityWebRequest.Get(\"http://localhost/ex_get.php\");\n        yield return www.SendWebRequest();\n\n        if (www.result != UnityWebRequest.Result.Success)\n        {\n            Debug.LogError(\"Error: \" + www.error);\n        }\n        else\n        {\n            string respuesta = www.downloadHandler.text;\n            Debug.Log(\"Respuesta del servidor: \" + respuesta);\n        }\n    }\n}\n</code></pre>"},{"location":"t_getpost/#ejemplo-practico","title":"Ejemplo Pr\u00e1ctico","text":"<p>Imagina que tenemos una API de clima y queremos obtener la temperatura actual de una ciudad:</p> <pre><code>IEnumerator ObtenerClima(string ciudad)\n{\n    string url = \"https://api.openweathermap.org/data/2.5/weather?q=\" + ciudad + \"&amp;appid=TU_API_KEY\";\n    UnityWebRequest www = UnityWebRequest.Get(url);\n    yield return www.SendWebRequest();\n\n    if (www.result == UnityWebRequest.Result.Success)\n    {\n        Debug.Log(\"Datos del clima: \" + www.downloadHandler.text);\n    }\n    else\n    {\n        Debug.LogError(\"Error en la petici\u00f3n: \" + www.error);\n    }\n}\n</code></pre>"},{"location":"t_getpost/#2-peticiones-post-en-unity","title":"2. Peticiones POST en Unity","text":""},{"location":"t_getpost/#concepto_1","title":"Concepto","text":"<p>Las peticiones POST env\u00edan datos al servidor, normalmente para almacenar informaci\u00f3n o realizar autenticaciones.</p>"},{"location":"t_getpost/#codigo-base_1","title":"C\u00f3digo Base","text":"<pre><code>using UnityEngine;\nusing UnityEngine.Networking;\nusing System.Collections;\n\npublic class PeticionPOST : MonoBehaviour\n{\n    public void ClickEnviarPost()\n    {\n        StartCoroutine(EnviarPost());\n    }\n\n    IEnumerator EnviarPost()\n    {\n        WWWForm form = new WWWForm();\n        form.AddField(\"usuario\", \"Juan\");\n        form.AddField(\"edad\", \"25\");\n\n        UnityWebRequest www = UnityWebRequest.Post(\"http://localhost/ex_post.php\", form);\n        yield return www.SendWebRequest();\n\n        if (www.result != UnityWebRequest.Result.Success)\n        {\n            Debug.LogError(\"Error: \" + www.error);\n        }\n        else\n        {\n            Debug.Log(\"Respuesta del servidor: \" + www.downloadHandler.text);\n        }\n    }\n}\n</code></pre>"},{"location":"t_getpost/#ejemplo-practico_1","title":"Ejemplo Pr\u00e1ctico","text":"<p>En un juego, al registrar a un usuario en el servidor:</p> <pre><code>IEnumerator RegistrarUsuario(string nombre, int edad)\n{\n    WWWForm form = new WWWForm();\n    form.AddField(\"nombre\", nombre);\n    form.AddField(\"edad\", edad.ToString());\n\n    UnityWebRequest www = UnityWebRequest.Post(\"http://localhost/registrar.php\", form);\n    yield return www.SendWebRequest();\n\n    if (www.result == UnityWebRequest.Result.Success)\n    {\n        Debug.Log(\"Registro exitoso: \" + www.downloadHandler.text);\n    }\n    else\n    {\n        Debug.LogError(\"Error en la petici\u00f3n: \" + www.error);\n    }\n}\n</code></pre>"},{"location":"t_getpost/#3-manejo-de-respuestas-json","title":"3. Manejo de Respuestas JSON","text":""},{"location":"t_getpost/#concepto_2","title":"Concepto","text":"<p>Cuando el servidor responde con un JSON, podemos convertirlo en un objeto en Unity usando <code>JsonUtility.FromJson</code>.</p>"},{"location":"t_getpost/#codigo-base_2","title":"C\u00f3digo Base","text":"<pre><code>[System.Serializable]\npublic class InfoJugador\n{\n    public string nick;\n    public int puntos;\n}\n\nIEnumerator ObtenerDatosJugador()\n{\n    UnityWebRequest www = UnityWebRequest.Get(\"http://localhost/ex_get.php\");\n    yield return www.SendWebRequest();\n\n    if (www.result == UnityWebRequest.Result.Success)\n    {\n        string jsonResponse = www.downloadHandler.text;\n        InfoJugador jugador = JsonUtility.FromJson&lt;InfoJugador&gt;(jsonResponse);\n        Debug.Log(\"Jugador: \" + jugador.nick + \" - Puntos: \" + jugador.puntos);\n    }\n}\n</code></pre>"},{"location":"t_getpost/#ejemplo-con-respuesta-json-en-un-array","title":"Ejemplo con Respuesta JSON en un Array","text":"<p>Si la respuesta JSON contiene un array, necesitamos una clase extra para manejarlo: <pre><code>[System.Serializable]\npublic class ListaJugadores\n{\n    public InfoJugador[] jugadores;\n}\n\nIEnumerator ObtenerListaJugadores()\n{\n    UnityWebRequest www = UnityWebRequest.Get(\"http://localhost/ex_get_lista.php\");\n    yield return www.SendWebRequest();\n\n    if (www.result == UnityWebRequest.Result.Success)\n    {\n        string jsonResponse = www.downloadHandler.text;\n        ListaJugadores lista = JsonUtility.FromJson&lt;ListaJugadores&gt;(jsonResponse);\n\n        foreach (var jugador in lista.jugadores)\n        {\n            Debug.Log(\"Jugador: \" + jugador.nick + \" - Puntos: \" + jugador.puntos);\n        }\n    }\n}\n</code></pre></p>"},{"location":"t_network/","title":"Teor\u00eda Network (beta)","text":""},{"location":"t_network/#4-network-transport-en-unity","title":"4. Network Transport en Unity","text":""},{"location":"t_network/#concepto","title":"Concepto","text":"<p>Network Transport es un sistema de comunicaci\u00f3n de bajo nivel que permite enviar y recibir datos entre clientes y servidores en Unity.</p>"},{"location":"t_network/#instalacion","title":"Instalaci\u00f3n","text":"<ol> <li>Ir a Window -&gt; Package Manager.</li> <li>Seleccionar Add Package by Name e ingresar: <code>com.unity.transport</code>.</li> </ol>"},{"location":"t_network/#ejemplo-de-conexion-con-network-transport","title":"Ejemplo de Conexi\u00f3n con Network Transport","text":"<pre><code>using Unity.Networking.Transport;\nusing Unity.Collections;\nusing UnityEngine;\n\npublic class Servidor : MonoBehaviour\n{\n    private NetworkDriver driver;\n    private NetworkPipeline pipeline;\n    private NativeList&lt;NetworkConnection&gt; connections;\n\n    void Start()\n    {\n        driver = NetworkDriver.Create();\n        pipeline = driver.CreatePipeline();\n        connections = new NativeList&lt;NetworkConnection&gt;(16, Allocator.Persistent);\n\n        var endpoint = NetworkEndpoint.AnyIpv4;\n        endpoint.Port = 9000;\n        if (driver.Bind(endpoint) != 0)\n            Debug.LogError(\"Fallo en la conexi\u00f3n del servidor\");\n        else\n            driver.Listen();\n    }\n\n    void Update()\n    {\n        driver.ScheduleUpdate().Complete();\n\n        for (int i = 0; i &lt; connections.Length; i++)\n        {\n            if (!connections[i].IsCreated)\n                continue;\n\n            NetworkEvent.Type cmd;\n            while ((cmd = driver.PopEventForConnection(connections[i], out var stream)) != NetworkEvent.Type.Empty)\n            {\n                if (cmd == NetworkEvent.Type.Data)\n                {\n                    DataStreamReader reader = new DataStreamReader(stream, Allocator.Temp);\n                    int mensaje = reader.ReadInt();\n                    Debug.Log(\"Mensaje recibido: \" + mensaje);\n                }\n            }\n        }\n    }\n\n    void OnDestroy()\n    {\n        driver.Dispose();\n        connections.Dispose();\n    }\n}\n</code></pre>"},{"location":"t_network/#explicacion","title":"Explicaci\u00f3n","text":"<ul> <li>Se crea un NetworkDriver que act\u00faa como servidor.</li> <li>Se establece un pipeline de comunicaci\u00f3n.</li> <li>Se escucha en el puerto 9000.</li> <li>Se reciben datos y se imprimen en consola.</li> </ul>"},{"location":"t_network/#ejercicios-practicos","title":"Ejercicios pr\u00e1cticos","text":"<ol> <li>Crear un sistema de autenticaci\u00f3n con <code>POST</code>.</li> <li>Hacer un ranking de jugadores usando JSON.</li> <li>Crear un chat en tiempo real con Network Transport.</li> </ol> <p>Si necesitas m\u00e1s detalles o un enfoque diferente para tus clases, dime c\u00f3mo quieres estructurarlo.</p>"},{"location":"t_network/#practicas","title":"Pr\u00e1cticas","text":"<p>Aqu\u00ed tienes los tres ejemplos completos y comentados adaptados a Python (Flask + MySQL).</p>"},{"location":"t_network/#ejemplo-1-autenticacion-de-usuario-con-post","title":"Ejemplo 1: Autenticaci\u00f3n de Usuario con POST","text":"<p>En este ejercicio, crearemos un sistema de autenticaci\u00f3n donde un usuario ingresa su nombre y contrase\u00f1a, y estos se env\u00edan a un servidor en Python con Flask.</p>"},{"location":"t_network/#codigo-en-python-servidor","title":"C\u00f3digo en Python (Servidor)","text":"<pre><code>from flask import Flask, request, jsonify\nimport mysql.connector\n\napp = Flask(__name__)\n\n# Conexi\u00f3n a la base de datos MySQL\ndb = mysql.connector.connect(\n    host=\"localhost\",\n    user=\"unity\",\n    password=\"password_seguro\",\n    database=\"juego\"\n)\ncursor = db.cursor()\n\n# Ruta para autenticaci\u00f3n de usuario\n@app.route('/autenticar', methods=['POST'])\ndef autenticar():\n    datos = request.json\n    usuario = datos['usuario']\n    password = datos['password']\n\n    cursor.execute(\"SELECT * FROM usuarios WHERE usuario = %s AND password = %s\", (usuario, password))\n    usuario_encontrado = cursor.fetchone()\n\n    if usuario_encontrado:\n        return jsonify({\"status\": \"success\", \"message\": \"Inicio de sesi\u00f3n exitoso\"})\n    else:\n        return jsonify({\"status\": \"error\", \"message\": \"Credenciales incorrectas\"}), 401\n\nif __name__ == '__main__':\n    app.run(host=\"0.0.0.0\", port=5000, debug=True)\n</code></pre>"},{"location":"t_network/#ejemplo-2-ranking-de-jugadores-con-json","title":"Ejemplo 2: Ranking de Jugadores con JSON","text":"<p>En este ejercicio, el cliente solicitar\u00e1 un ranking de jugadores desde el servidor y mostrar\u00e1 los datos en la consola.</p>"},{"location":"t_network/#codigo-en-python-servidor_1","title":"C\u00f3digo en Python (Servidor)","text":"<pre><code>@app.route('/ranking', methods=['GET'])\ndef ranking():\n    cursor.execute(\"SELECT nombre, puntuacion FROM jugadores ORDER BY puntuacion DESC LIMIT 10\")\n    jugadores = cursor.fetchall()\n\n    resultado = [{\"nombre\": j[0], \"puntuacion\": j[1]} for j in jugadores]\n    return jsonify({\"jugadores\": resultado})\n</code></pre>"},{"location":"t_network/#ejemplo-3-chat-en-tiempo-real-con-python-websockets","title":"Ejemplo 3: Chat en Tiempo Real con Python (WebSockets)","text":"<p>En este ejemplo, usaremos WebSockets en Flask para permitir comunicaci\u00f3n en tiempo real entre clientes y servidores.</p>"},{"location":"t_network/#instalar-flask-socketio","title":"Instalar Flask-SocketIO","text":"<p>Ejecuta en tu servidor:</p> <pre><code>pip3 install flask-socketio eventlet\n</code></pre>"},{"location":"t_network/#codigo-en-python-servidor-websocket","title":"C\u00f3digo en Python (Servidor WebSocket)","text":"<pre><code>from flask import Flask, request\nfrom flask_socketio import SocketIO, send\n\napp = Flask(__name__)\nsocketio = SocketIO(app, cors_allowed_origins=\"*\")\n\n# Evento cuando un cliente env\u00eda un mensaje\n@socketio.on('mensaje')\ndef manejar_mensaje(mensaje):\n    print(f'Mensaje recibido: {mensaje}')\n    send(mensaje, broadcast=True)  # Enviar a todos los clientes conectados\n\nif __name__ == '__main__':\n    socketio.run(app, host=\"0.0.0.0\", port=5001, debug=True)\n</code></pre>"},{"location":"t_network/#resumen","title":"\ud83d\udccc Resumen","text":"<ol> <li>Autenticaci\u00f3n con Flask y MySQL: Maneja inicio de sesi\u00f3n con <code>POST</code>.</li> <li>Ranking de jugadores: Responde en formato JSON con los mejores jugadores.</li> <li>Chat en tiempo real con WebSockets: Permite comunicaci\u00f3n entre m\u00faltiples clientes.</li> </ol> <p>\ud83d\ude80 Ahora tu servidor est\u00e1 listo para conectarse con Unity o cualquier cliente externo! \ud83d\udd25</p>"},{"location":"t_network/#resumen-de-la-configuracion-y-desarrollo-del-servidor-para-unity","title":"Resumen de la Configuraci\u00f3n y Desarrollo del Servidor para Unity**","text":""},{"location":"t_network/#1-instalacion-del-servidor-en-la-nube-python-mysql","title":"1\ufe0f\u20e3 Instalaci\u00f3n del Servidor en la Nube (Python + MySQL)","text":"<ul> <li>Instalar dependencias:</li> </ul> <pre><code>sudo apt update &amp;&amp; sudo apt install python3 python3-pip mysql-server -y\npip3 install flask flask-mysql flask-cors\n</code></pre> <ul> <li>Configurar MySQL:</li> </ul> <pre><code>CREATE DATABASE juego;\nCREATE TABLE usuarios (id INT AUTO_INCREMENT PRIMARY KEY, usuario VARCHAR(50) UNIQUE, password VARCHAR(255));\nCREATE TABLE jugadores (id INT AUTO_INCREMENT PRIMARY KEY, nombre VARCHAR(50), puntuacion INT);\n</code></pre> <ul> <li>Habilitar acceso remoto si es necesario (<code>/etc/mysql/mysql.conf.d/mysqld.cnf</code>):</li> </ul> <pre><code>bind-address = 0.0.0.0\n</code></pre> <p>Reiniciar MySQL:</p> <pre><code>sudo systemctl restart mysql\n</code></pre>"},{"location":"t_network/#2-servidor-en-python-con-flask","title":"2\ufe0f\u20e3 Servidor en Python con Flask","text":"<p>Archivo <code>servidor.py</code></p> <pre><code>from flask import Flask, request, jsonify\nimport mysql.connector\n\napp = Flask(__name__)\ndb = mysql.connector.connect(host=\"localhost\", user=\"unity\", password=\"password_seguro\", database=\"juego\")\ncursor = db.cursor()\n\n@app.route('/autenticar', methods=['POST'])\ndef autenticar():\n    datos = request.json\n    cursor.execute(\"SELECT * FROM usuarios WHERE usuario = %s AND password = %s\", (datos['usuario'], datos['password']))\n    return jsonify({\"status\": \"success\" if cursor.fetchone() else \"error\", \"message\": \"Inicio de sesi\u00f3n\"})\n\n@app.route('/ranking', methods=['GET'])\ndef ranking():\n    cursor.execute(\"SELECT nombre, puntuacion FROM jugadores ORDER BY puntuacion DESC LIMIT 10\")\n    return jsonify({\"jugadores\": [{\"nombre\": j[0], \"puntuacion\": j[1]} for j in cursor.fetchall()]})\n\n@app.route('/nuevo_jugador', methods=['POST'])\ndef nuevo_jugador():\n    datos = request.json\n    cursor.execute(\"INSERT INTO jugadores (nombre, puntuacion) VALUES (%s, %s)\", (datos['nombre'], datos['puntuacion']))\n    db.commit()\n    return jsonify({\"status\": \"success\", \"message\": \"Jugador agregado\"})\n\nif __name__ == '__main__':\n    app.run(host=\"0.0.0.0\", port=5000, debug=True)\n</code></pre> <ul> <li>Ejecutar el servidor:</li> </ul> <pre><code>python3 servidor.py\n</code></pre> <p>Para mantenerlo activo:</p> <pre><code>nohup python3 servidor.py &gt; log.txt 2&gt;&amp;1 &amp;\n</code></pre>"},{"location":"t_network/#3-pruebas-del-servidor-sin-unity","title":"3\ufe0f\u20e3 Pruebas del Servidor sin Unity","text":"<ul> <li>Postman o cURL:</li> </ul> <pre><code>curl -X POST http://localhost:5000/autenticar -H \"Content-Type: application/json\" -d '{\"usuario\":\"user\", \"password\":\"pass\"}'\n</code></pre> <ul> <li>Prueba en C# sin Unity (<code>test.cs</code>)</li> </ul> <pre><code>using System;\nusing System.Net.Http;\nusing System.Text;\nusing System.Threading.Tasks;\n\nclass Program\n{\n    static async Task Main(string[] args)\n    {\n        string servidorURL = \"http://localhost:5000/autenticar\";\n        string jsonData = \"{\\\"usuario\\\": \\\"user\\\", \\\"password\\\": \\\"pass\\\"}\";\n\n        using (HttpClient client = new HttpClient())\n        {\n            var content = new StringContent(jsonData, Encoding.UTF8, \"application/json\");\n            HttpResponseMessage response = await client.PostAsync(servidorURL, content);\n            Console.WriteLine(\"Respuesta: \" + await response.Content.ReadAsStringAsync());\n        }\n    }\n}\n</code></pre> <p>Ejecutar:</p> <pre><code>dotnet run test.cs\n</code></pre>"},{"location":"t_network/#4-integracion-en-unity","title":"4\ufe0f\u20e3 Integraci\u00f3n en Unity","text":"<p>Autenticaci\u00f3n en Unity</p> <pre><code>IEnumerator AutenticarUsuario(string usuario, string password)\n{\n    string jsonData = \"{\\\"usuario\\\": \\\"\" + usuario + \"\\\", \\\"password\\\": \\\"\" + password + \"\\\"}\";\n    UnityWebRequest www = new UnityWebRequest(\"http://TU_SERVIDOR:5000/autenticar\", \"POST\");\n    www.uploadHandler = new UploadHandlerRaw(System.Text.Encoding.UTF8.GetBytes(jsonData));\n    www.downloadHandler = new DownloadHandlerBuffer();\n    www.SetRequestHeader(\"Content-Type\", \"application/json\");\n    yield return www.SendWebRequest();\n    Debug.Log(\"Respuesta: \" + www.downloadHandler.text);\n}\n</code></pre> <p>Obtener Ranking en Unity</p> <pre><code>IEnumerator DescargarRanking()\n{\n    UnityWebRequest www = UnityWebRequest.Get(\"http://TU_SERVIDOR:5000/ranking\");\n    yield return www.SendWebRequest();\n    Debug.Log(\"Ranking recibido: \" + www.downloadHandler.text);\n}\n</code></pre>"},{"location":"t_network/#conclusion","title":"Conclusi\u00f3n","text":"<p>Servidor en Python + MySQL configurado correctamente. Pruebas funcionales sin Unity (con Postman o cURL). C\u00f3digo en Unity listo para conectarse al servidor.  </p>"}]}