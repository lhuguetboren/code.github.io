{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Pr\u00e1ctica 7B (REACT formularios)","text":""},{"location":"#practica","title":"Pr\u00e1ctica","text":"<p>Ir a</p> <ul> <li>Descripci\u00f3n de la pr\u00e1ctica</li> <li>Cuestionarios JSON</li> <li>Plan de trabajo</li> <li>Roles</li> <li>Calendario-Diagrama de Gantt</li> <li>Evaluaci\u00f3n</li> </ul>"},{"location":"#ejemplos-de-codigo-para-la-aplicacion","title":"Ejemplos de c\u00f3digo para la aplicaci\u00f3n","text":"<p>Ir a</p> <ul> <li>Lectura JSON</li> <li>LocalStorage</li> </ul>"},{"location":"#ejemplos-de-codigo-para-los-cuestionarios","title":"Ejemplos de c\u00f3digo para los cuestionarios","text":"<p>Validaci\u00f3n de formularios</p>"},{"location":"#archivo-de-cuestionarios","title":"Archivo de cuestionarios","text":"<p>Archivo json con los cuestionarios</p>"},{"location":"#instalacion","title":"Instalaci\u00f3n","text":"<p>Instalaci\u00f3n de REACT-VITE-TYPESCRIPT</p>"},{"location":"PRACTICA-REACT%2BFORMULARIO/","title":"Descripci\u00f3n","text":""},{"location":"PRACTICA-REACT%2BFORMULARIO/#practica-07b-formulario-con-react-entrega-2032025","title":"Pr\u00e1ctica 07B - Formulario con REACT - Entrega 20/3/2025","text":""},{"location":"PRACTICA-REACT%2BFORMULARIO/#indice","title":"\u00cdndice","text":"<p>Descripci\u00f3n de la pr\u00e1ctica</p> <ul> <li>Estructura de la aplicaci\u00f3n</li> <li>Navegaci\u00f3n</li> <li>Dise\u00f1o</li> <li>Multi-idioma</li> </ul> <p>Cuestionarios JSON Plan de trabajo Roles Calendario-Diagrama de Gantt Evaluaci\u00f3n)</p>"},{"location":"PRACTICA-REACT%2BFORMULARIO/#descripcion-de-la-practica","title":"Descripci\u00f3n de la pr\u00e1ctica","text":"<ul> <li>Crear una aplicaci\u00f3n en React donde el usuario debe completar una serie de formularios de forma secuencial.</li> <li>La aplicaci\u00f3n tiene m\u00faltiples formularios, y el usuario debe responder uno tras otro.</li> <li>Al finalizar se deber\u00e1 poder ver los contestaciones a los 3 cuestionarios</li> </ul>"},{"location":"PRACTICA-REACT%2BFORMULARIO/#estructura-de-la-aplicacion","title":"Estructura de la aplicaci\u00f3n","text":"<ol> <li>M\u00faltiples Formularios</li> <li> <p>La aplicaci\u00f3n tiene 4  formularios:</p> <ol> <li>Formulario de informaci\u00f3n personal</li> <li>Formulario de evaluaci\u00f3n acad\u00e9mica</li> <li>Formulario de preferencias en tecnolog\u00eda</li> <li>Formulario de preferencias en cine</li> </ol> </li> <li> <p>Condici\u00f3n de Ciclo de Vida:</p> </li> <li>El usuario solo puede avanzar al siguiente formulario si todos los campos del formulario actual est\u00e1n completos.</li> <li>El avance de un formulario al siguiente est\u00e1 controlado por el estado del componente y se gestionar\u00e1 mediante el hook <code>useState</code>.</li> <li> <p>Despu\u00e9s de completar un formulario, el componente desencadenar\u00e1 una acci\u00f3n para pasar al siguiente formulario.</p> </li> <li> <p>Uso de <code>useEffect</code>:</p> </li> <li> <p><code>useEffect</code> puede utilizarse para manejar efectos secundarios, como la validaci\u00f3n de formularios y la transici\u00f3n de un formulario al siguiente. Por ejemplo, cuando el estado de un formulario cambia (cuando se completan los campos), un efecto puede activar el paso al siguiente formulario.</p> </li> <li> <p>Control de la Secuencia:</p> </li> <li>El ciclo de vida de cada formulario incluye pasos para:<ul> <li>Mostrar el formulario.</li> <li>Validar las respuestas.</li> <li>Pasar al siguiente formulario (s\u00f3lo si es v\u00e1lido).</li> </ul> </li> </ol> <p>Este escenario implica:</p> <ul> <li>En el inicio debe existir una \"p\u00e1gina\" de bienvenida.</li> <li>Cada formulario es una etapa dentro del ciclo de vida de la aplicaci\u00f3n, con validaciones, transiciones y actualizaciones del estado, utilizando <code>useState</code> y <code>useEffect</code>.</li> <li>El ciclo de vida de los formularios incluye pasar del uno al siguiente solo si el formulario actual es v\u00e1lido.</li> <li>Guardaremos toda la informaci\u00f3n de los formularios en <code>localStorage</code> de forma que si salimos antes de terminar nos recupere la informaci\u00f3n existente.</li> <li>Si un usuario finaliza todos los cuestionarios se podr\u00e1 consultar sus resultados en la \u00faltima p\u00e1gina.</li> <li>Debe existir un bot\u00f3n de RESET para poder empezar de nuevo.</li> </ul>"},{"location":"PRACTICA-REACT%2BFORMULARIO/#navegacion","title":"Navegaci\u00f3n","text":"<p>Se basar\u00e1 en el estado, existiendo 3 \"p\u00e1ginas\"</p> <ul> <li>Bienvenida: donde se explicar\u00e1 de forma simple el objetivo de la aplicaci\u00f3n y se indicar\u00e1n las instrucciones necesarias para realizarla</li> <li>Realizaci\u00f3n de formularios: Se deber\u00e1n realizar los cuestionarios de forma consecutiva validando cada form/control de forma s\u00edncrona e informando de los problemas detectados. Al finalizar el cuestionario y antes de pasar al siguiente se deber\u00e1 realizar una validaci\u00f3n general. En el final se enviar\u00e1 a la p\u00e1gina resumen</li> <li>Resumen: p\u00e1gina donde aparecer\u00e1 toda la informaci\u00f3n resultante del uso de los cuestionarios.</li> </ul>"},{"location":"PRACTICA-REACT%2BFORMULARIO/#diseno","title":"Dise\u00f1o","text":"<p>Se realizar\u00e1 un dise\u00f1o para la aplicaci\u00f3n, este deber\u00e1 incluir</p> <ul> <li>Seleccionar dos tipograf\u00edas diferentes y aplicarlas con criterio para:</li> <li>Titulos</li> <li>P\u00e1rrafos</li> <li>Etiquetas de los forms</li> <li>Contenido de los forms</li> <li>Botones</li> <li>Avisos</li> <li>Colores</li> <li>Fondo p\u00e1gina</li> <li>Fondo cuestionarios</li> <li>Semantica</li> <li>Section Header<ul> <li>T\u00edtulo de la aplicaci\u00f3n com\u00fan a todas las \"paginas\" y botones para cambio de idioma</li> </ul> </li> <li>Section contenido header<ul> <li>Banners: baner rotatorio para todos las paginas.</li> </ul> </li> <li>Section contenido<ul> <li>Bienvenida: texto + imagen</li> <li>Formulario: formulario + aviso errores general</li> </ul> </li> <li>Section Footer<ul> <li>Nombre de la aplicacion y fecha incluyendo hora y minuto</li> </ul> </li> </ul>"},{"location":"PRACTICA-REACT%2BFORMULARIO/#multi-idioma","title":"Multi-idioma","text":"<p>La aplicaci\u00f3n deber\u00e1 estar en espa\u00f1ol e ingl\u00e9s utilizando la libreria i18</p>"},{"location":"PRACTICA-REACT%2BFORMULARIO/#codigos-ejemplo","title":"C\u00f3digos ejemplo","text":"<p>Encontrar\u00e1s codigos ejemplo para el componente formulario y para localstorage en Ejemplos Codigo</p>"},{"location":"PRACTICA-REACT%2BFORMULARIO/#cuestionarios-json","title":"Cuestionarios JSON","text":"<p>Los cuestionario y sus validaciones estan definidas en cuestionarios y validaciones</p>"},{"location":"PRACTICA-REACT%2BFORMULARIO/#plan-de-trabajo","title":"Plan de trabajo","text":"<pre><code>1. INICIO\n   - Desarrollar una aplicaci\u00f3n con m\u00faltiples formularios que se completan uno tras otro.\n   - Desarolla una navegaci\u00f3n mediante `useState` que genere una p\u00e1gina de bienvenida, otra para la realizaci\u00f3n de formualarios y una final para presentar los resultados.\n\n2. Definir la estructura del componente:\n   - El componente principal manejar\u00e1 los formularios.\n   - Cada formulario se presentar\u00e1 uno por uno, dependiendo del estado de la aplicaci\u00f3n.\n\n3. Definir los tipos de estado para cada formulario:\n   - Crear un estado para el formulario actual (`formularioActual`), que controlar\u00e1 cu\u00e1l de los formularios se mostrar\u00e1 en cada momento.\n   - Crear estados para almacenar las respuestas de cada formulario:\n     - Formulario de informaci\u00f3n personal .\n     - Formulario de evaluaci\u00f3n acad\u00e9mica \n     - Formulario de tecnolog\u00eda.\n     - Formulario de cine.\n\n   - Crear un estado para manejar los mensajes de error si los campos no se completan correctamente.\n\n4. Configurar la funci\u00f3n `handleChange` para actualizar el estado de cada formulario cuando el usuario escriba en los campos de entrada.\n\n5. Validar los campos de cada formulario:\n   - Antes de avanzar al siguiente campo formulario, verificar que el valor sea correcto y mostrar un mensaje de error.\n   - Antes de avanzar al siguiente formulario, verificar que todos los campos del formulario actual est\u00e9n completos.\n   - Si no se completan correctamente, mostrar un mensaje de error.\n\n6. Usar `useEffect` para gestionar el ciclo de vida del formulario:\n   - Cuando el estado `formularioActual` cambia (por ejemplo, el usuario pasa de un formulario a otro), ejecutar una validaci\u00f3n adicional si es necesario.\n\n7. Manejar el avance entre formularios:\n   - Si los campos del formulario actual son v\u00e1lidos, permitir que el usuario pase al siguiente formulario incrementando el valor de `formularioActual`.\n   - Si el formulario actual est\u00e1 completo y el \u00faltimo formulario es enviado, mostrar un mensaje de \"Formulario completado\".\n\n8. Mostrar los formularios y campos condicionalmente:\n   - Usar condicionales para renderizar solo el formulario correspondiente, dependiendo del valor de `formularioActual`.\n\n9. Mostrar los errores de validaci\u00f3n:\n   - Si hay alg\u00fan error (por ejemplo, campos vac\u00edos o contrase\u00f1as que no coinciden), mostrar el mensaje de error en la interfaz.\n\n10. Nueva pantalla con los resultados de todos los cuestionarios\n</code></pre>"},{"location":"PRACTICA-REACT%2BFORMULARIO/#recomendaciones","title":"Recomendaciones","text":"<ol> <li>Navegaci\u00f3n:</li> <li> <p>Utiliza <code>useState</code> para la visulizaci\u00f3n de las diferentes secciones</p> </li> <li> <p>Estructura del Componente:</p> </li> <li> <p>Crea un componente principal <code>FormularioSecuencial</code> que manejar\u00e1 el estado y el renderizado de los formularios.</p> </li> <li> <p>Estados en React:</p> </li> <li> <p>Usa <code>useState</code> para definir el estado de <code>formularioActual</code> (el formulario que se est\u00e1 mostrando actualmente) y los estados para cada formulario (personal, preferencias y contacto)</p> </li> <li> <p>Formularios con Inputs:</p> </li> <li>Crea un formulario para cada secci\u00f3n (informaci\u00f3n personal, preferencias, contacto).</li> <li>Usa inputs controlados (<code>value</code> y <code>onChange</code>) para manejar los valores ingresados por el usuario.</li> <li> <p>Presenta por pantalla el error.</p> </li> <li> <p>Validaciones de Campos:</p> </li> <li> <p>Antes de pasar al siguiente formulario, valida si los campos est\u00e1n completos. Si no, muestra un mensaje de error.</p> </li> <li> <p>Ciclo de Vida con <code>useEffect</code>:</p> </li> <li> <p>Usa <code>useEffect</code> para ejecutar acciones cuando <code>formularioActual</code> cambie. Por ejemplo, puedes comprobar si los campos del formulario est\u00e1n completos al cambiar de un formulario a otro.</p> </li> <li> <p>Navegaci\u00f3n entre Formularios:</p> </li> <li> <p>Cuando el usuario env\u00ede un formulario, valida los campos. Si son correctos, cambia el estado de <code>formularioActual</code> para mostrar el siguiente formulario.</p> </li> <li> <p>Condicionales para Mostrar Formularios:</p> </li> <li> <p>Usa condicionales (<code>if</code> o un switch) para renderizar solo el formulario actual basado en el valor de <code>formularioActual</code>.</p> </li> <li> <p>Errores de Validaci\u00f3n:</p> </li> <li> <p>Muestra los errores de validaci\u00f3n si alg\u00fan campo no se completa correctamente. Utiliza un estado <code>error</code> para almacenar los mensajes de error.</p> </li> <li> <p>Gestiona los mensajes de error</p> <ul> <li>Muestra de forma clara mensajes como \"Por favor complete todos los campos\" o \"Las contrase\u00f1as no coinciden\".</li> </ul> </li> <li> <p>Define los estilos desde el inicio para asegurar la adecuaci\u00f3n y calidad de la aplicaci\u00f3n.</p> </li> <li> <p>Prevee el multiidioma en todo el c\u00f3digo desarrollado</p> </li> </ol>"},{"location":"PRACTICA-REACT%2BFORMULARIO/#roles","title":"Roles","text":"<p>Tras el inicio se asignaran 3 roles para cada uno de los participantes. Cada uno de ellos ser\u00e1 el responsable de cada uno de los siguientes \u00e1mbitos:</p> <ul> <li>Formularios (rol 1)</li> <li>Navegaci\u00f3n y dise\u00f1o (rol 2)</li> <li>Validaci\u00f3n de formularios y multiidioma (rol 3)</li> </ul>"},{"location":"PRACTICA-REACT%2BFORMULARIO/#calendario-diagrama-de-gantt","title":"Calendario-Diagrama de Gantt","text":"<pre><code>gantt\n    title Pr\u00e1ctica 07B\n    dateFormat  YYYY-MM-DD\n    axisFormat  %d/%m\n\n    section Planificaci\u00f3n\n    Definici\u00f3n del proyecto       :        des1,2025-02-20, 2025-02-24\n    Asignaci\u00f3n de roles           :        des2,2025-02-24, 2025-02-24\n\n    section Dise\u00f1o\n    Dise\u00f1o UX/UI (rol 1)                  :        des4, 2025-02-24, 2025-02-25\n    Traducciones (rol 2)                  :        des5, 2025-02-24, 2025-02-25\n    Navegaci\u00f3n (rol 3)                    :        des5, 2025-02-24, 2025-02-25\n    Maqueta funcional                     : milestone, 2025-02-25, 2025-02-25\n\n    section Desarrollo\n    Componente formulario (rol 1)        :        des6, 2025-02-25, 2025-03-18\n    Componente validaci\u00f3n (rol 2)        :        des7, 2025-02-25, 2025-03-18\n    Componente resumen  (rol 3)          :        des8, 2025-02-25, 2025-03-18\n    Versi\u00f3n Beta                         : milestone,2025-03-19\n    section Pruebas\n    Pruebas                       :        des9, 2025-03-06, 2025-03-20\n    Correcci\u00f3n de errores         :        des11, 2025-03-10, 2025-03-20\n\n    section Cierre\n    Documentaci\u00f3n c\u00f3digo          :        des12, 2025-03-11, 2025-03-23\n    Entrega                       : milestone,       des12, 2025-03-13, 2025-03-23</code></pre>"},{"location":"PRACTICA-REACT%2BFORMULARIO/#evaluacion","title":"Evaluaci\u00f3n","text":"Concepto Porcentaje Correcto funcionamiento  de la aplicacion 40% Comentar el c\u00f3digo de forma completa 20% Dise\u00f1o gr\u00e1fico libre (que no da\u00f1e la vista) 10% Seguimiento de calendario (al finalizar cada fase se comprobora por equipo alcanzar el hito) 20% Incluir nuevas funcionalidades \u00fatiles en el proyecto 10%"},{"location":"codigo-json-form-local-storage/","title":"Indice Ejemplos de c\u00f3digo para la pr\u00e1ctica","text":"<p>Componente para leer un json que cree el cuestionario</p> <p>Renderizar un elemento del cuestionario</p> <p>Guardar y Recuperar Respuestas desde <code>localStorage</code></p>"},{"location":"codigo-json-form-local-storage/#componente-para-leer-un-json-que-cree-el-cuestionario","title":"Componente para leer un json que cree el cuestionario","text":"<p>Aqu\u00ed tienes un ejemplo de c\u00f3mo podr\u00edas crear un componente en React + TypeScript que lee un archivo JSON con los datos necesarios para construir un cuestionario. Este ejemplo est\u00e1 dise\u00f1ado para que el componente lea los elementos de un archivo JSON, los procese y renderice un cuestionario din\u00e1mico con las preguntas y opciones correspondientes.</p>"},{"location":"codigo-json-form-local-storage/#estructura-del-json","title":"Estructura del JSON","text":"<p>Supongamos que el archivo JSON tiene la siguiente estructura:</p> <pre><code>{\n  \"cuestionario\": {\n    \"titulo\": \"Cuestionario de ejemplo\",\n    \"preguntas\": [\n      {\n        \"id\": \"nombre\",\n        \"tipo\": \"text\",\n        \"pregunta\": \"\u00bfCu\u00e1l es tu nombre?\",\n        \"respuesta\": \"\"\n      },\n      {\n        \"id\": \"edad\",\n        \"tipo\": \"number\",\n        \"pregunta\": \"\u00bfCu\u00e1ntos a\u00f1os tienes?\",\n        \"respuesta\": \"\"\n      },\n      {\n        \"id\": \"sexo\",\n        \"tipo\": \"select\",\n        \"pregunta\": \"\u00bfCu\u00e1l es tu sexo?\",\n        \"opciones\": [\"Masculino\", \"Femenino\", \"Otro\"],\n        \"respuesta\": \"\"\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"codigo-json-form-local-storage/#componente-en-react-typescript-que-lee-desde-un-json","title":"Componente en React + TypeScript que lee desde un JSON","text":"<p>Primero, crea un archivo JSON en tu proyecto (por ejemplo, <code>cuestionario.json</code>) y luego crea el siguiente componente para leer y mostrar las preguntas del cuestionario.</p>"},{"location":"codigo-json-form-local-storage/#codigo-del-componente","title":"C\u00f3digo del Componente:","text":"<pre><code>import React, { useState, useEffect } from 'react';\n\n// Definimos los tipos del JSON para asegurar que el componente tiene los datos correctos.\ninterface Pregunta {\n  id: string;\n  tipo: 'text' | 'number' | 'select';\n  pregunta: string;\n  opciones?: string[];\n  respuesta: string;\n}\n\ninterface Cuestionario {\n  titulo: string;\n  preguntas: Pregunta[];\n}\n\nconst CuestionarioComponent: React.FC = () =&gt; {\n  // 1. Estado para almacenar los datos del cuestionario\n  const [cuestionario, setCuestionario] = useState&lt;Cuestionario | null&gt;(null);\n\n  // 2. Estado para manejar las respuestas del cuestionario\n  const [respuestas, setRespuestas] = useState&lt;{ [key: string]: string }&gt;({});\n\n  // 3. Leemos el archivo JSON al cargar el componente\n  useEffect(() =&gt; {\n    const fetchCuestionario = async () =&gt; {\n      try {\n        const response = await fetch('/path/to/cuestionario.json');  // Ruta del archivo JSON\n        const data: Cuestionario = await response.json();\n        setCuestionario(data);  // Guardamos los datos en el estado\n      } catch (error) {\n        console.error('Error al cargar el cuestionario:', error);\n      }\n    };\n\n    fetchCuestionario();\n  }, []);  // Solo se ejecuta una vez cuando el componente se monta\n\n  // 4. Funci\u00f3n para manejar el cambio de respuestas\n  const handleRespuestaChange = (e: React.ChangeEvent&lt;HTMLInputElement | HTMLSelectElement&gt;, id: string) =&gt; {\n    setRespuestas((prevRespuestas) =&gt; ({\n      ...prevRespuestas,\n      [id]: e.target.value,\n    }));\n  };\n\n  // 5. Funci\u00f3n para manejar el env\u00edo del cuestionario\n  const handleSubmit = (e: React.FormEvent) =&gt; {\n    e.preventDefault();\n    console.log('Respuestas enviadas:', respuestas);\n    // Aqu\u00ed podr\u00edas hacer algo con las respuestas, como enviarlas a un servidor.\n  };\n\n  // 6. Renderizamos el cuestionario din\u00e1micamente\n  if (!cuestionario) {\n    return &lt;div&gt;Cargando cuestionario...&lt;/div&gt;;\n  }\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;{cuestionario.titulo}&lt;/h2&gt;\n      &lt;form onSubmit={handleSubmit}&gt;\n        {cuestionario.preguntas.map((pregunta) =&gt; (\n          &lt;div key={pregunta.id}&gt;\n            &lt;label&gt;{pregunta.pregunta}&lt;/label&gt;\n            {pregunta.tipo === 'text' || pregunta.tipo === 'number' ? (\n              &lt;input\n                type={pregunta.tipo}\n                value={respuestas[pregunta.id] || ''}\n                onChange={(e) =&gt; handleRespuestaChange(e, pregunta.id)}\n              /&gt;\n            ) : pregunta.tipo === 'select' ? (\n              &lt;select value={respuestas[pregunta.id] || ''} onChange={(e) =&gt; handleRespuestaChange(e, pregunta.id)}&gt;\n                &lt;option value=\"\"&gt;Selecciona una opci\u00f3n&lt;/option&gt;\n                {pregunta.opciones?.map((opcion, index) =&gt; (\n                  &lt;option key={index} value={opcion}&gt;\n                    {opcion}\n                  &lt;/option&gt;\n                ))}\n              &lt;/select&gt;\n            ) : null}\n          &lt;/div&gt;\n        ))}\n        &lt;button type=\"submit\"&gt;Enviar Respuestas&lt;/button&gt;\n      &lt;/form&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default CuestionarioComponent;\n</code></pre>"},{"location":"codigo-json-form-local-storage/#explicacion-del-codigo","title":"Explicaci\u00f3n del C\u00f3digo:","text":"<ol> <li>Estado para almacenar el cuestionario:</li> <li>Usamos el estado <code>cuestionario</code> para guardar los datos que vienen del archivo JSON (t\u00edtulo y preguntas).</li> <li> <p>Usamos <code>respuestas</code> para almacenar las respuestas del usuario.</p> </li> <li> <p>Lectura del archivo JSON:</p> </li> <li>En el <code>useEffect</code>, usamos <code>fetch</code> para leer el archivo JSON desde el servidor (en este caso, el archivo se encuentra en la ruta <code>/path/to/cuestionario.json</code>).</li> <li> <p>Usamos <code>await response.json()</code> para parsear el contenido del archivo JSON y guardarlo en el estado <code>cuestionario</code>.</p> </li> <li> <p>Manejo de respuestas:</p> </li> <li> <p>La funci\u00f3n <code>handleRespuestaChange</code> actualiza el estado de las respuestas del usuario cada vez que el usuario cambia una respuesta en el formulario.</p> </li> <li> <p>Renderizado din\u00e1mico del formulario:</p> </li> <li>El formulario se renderiza din\u00e1micamente basado en el array <code>preguntas</code> del JSON. Dependiendo del tipo de pregunta (<code>text</code>, <code>number</code>, <code>select</code>), se renderiza un <code>input</code>, un <code>select</code> u otro tipo de campo.</li> <li> <p>Para las preguntas de tipo <code>select</code>, se renderizan las opciones a partir de los valores en el array <code>opciones</code>.</p> </li> <li> <p>Env\u00edo del formulario:</p> </li> <li>Cuando el usuario env\u00eda el formulario, la funci\u00f3n <code>handleSubmit</code> captura las respuestas y las imprime en la consola (o podr\u00edas enviarlas a un servidor).</li> </ol>"},{"location":"codigo-json-form-local-storage/#como-utilizarlo","title":"C\u00f3mo utilizarlo","text":"<ol> <li>Aseg\u00farate de tener el archivo JSON (<code>cuestionario.json</code>) con el contenido adecuado.</li> <li>Cambia la ruta de <code>fetch</code> para que apunte a la ubicaci\u00f3n correcta de tu archivo JSON en el servidor.</li> <li>Usa el componente <code>CuestionarioComponent</code> dentro de tu aplicaci\u00f3n React.</li> </ol>"},{"location":"codigo-json-form-local-storage/#renderizar-un-elemento-del-cuestionario","title":"Renderizar un elemento del cuestionario","text":"<p>Aqu\u00ed tienes un ejemplo de c\u00f3mo podr\u00edas traspasar un formulario definido en JSON a un componente React que sea viable. Tomando el objeto JSON que proporcionaste, te mostrar\u00e9 c\u00f3mo implementarlo en un componente de React que renderice un campo <code>select</code> con las opciones.</p> <p>El registro json es el siguiente</p> <pre><code>{\n  \"id\": \"satisfaccion\",\n  \"tipo\": \"select\",\n  \"pregunta\": \"\u00bfQu\u00e9 tan satisfecho est\u00e1s con el contenido del curso?\",\n  \"opciones\": [\"1\", \"2\", \"3\", \"4\", \"5\"]\n}\n</code></pre>"},{"location":"codigo-json-form-local-storage/#ejemplo-de-codigo-en-react","title":"Ejemplo de C\u00f3digo en React:","text":"<ol> <li>Vamos a utilizar el anterio JSON para generar el campo de selecci\u00f3n en un formulario React.</li> <li>Implementaremos un estado para guardar la respuesta del usuario.</li> <li>Al enviar el formulario, se puede mostrar la respuesta seleccionada.</li> </ol>"},{"location":"codigo-json-form-local-storage/#codigo-en-react","title":"C\u00f3digo en React:","text":"<pre><code>import React, { useState } from 'react';\n\nconst CuestionarioComponent: React.FC = () =&gt; {\n  // Estado para almacenar la respuesta seleccionada\n  const [respuesta, setRespuesta] = useState&lt;string&gt;('');\n\n  // Manejo del cambio en el select\n  const handleChange = (e: React.ChangeEvent&lt;HTMLSelectElement&gt;) =&gt; {\n    setRespuesta(e.target.value); // Actualizamos el estado con la opci\u00f3n seleccionada\n  };\n\n  // Funci\u00f3n para manejar el env\u00edo del formulario\n  const handleSubmit = (e: React.FormEvent) =&gt; {\n    e.preventDefault();\n    alert(`Respuesta seleccionada: ${respuesta}`);\n  };\n\n  // Opciones del select seg\u00fan el JSON\n  const opciones = [\"1\", \"2\", \"3\", \"4\", \"5\"];\n\n  return (\n    &lt;div&gt;\n      &lt;form onSubmit={handleSubmit}&gt;\n        &lt;div&gt;\n          &lt;label htmlFor=\"satisfaccion\"&gt;\u00bfQu\u00e9 tan satisfecho est\u00e1s con el contenido del curso?&lt;/label&gt;\n          &lt;select\n            id=\"satisfaccion\"\n            value={respuesta} // El valor del select est\u00e1 ligado al estado\n            onChange={handleChange} // Actualizamos el estado cuando el usuario selecciona una opci\u00f3n\n            required\n          &gt;\n            &lt;option value=\"\"&gt;Seleccione una opci\u00f3n&lt;/option&gt; {/* Opci\u00f3n por defecto */}\n            {opciones.map((opcion) =&gt; (\n              &lt;option key={opcion} value={opcion}&gt;\n                {opcion}\n              &lt;/option&gt;\n            ))}\n          &lt;/select&gt;\n        &lt;/div&gt;\n        &lt;button type=\"submit\"&gt;Enviar&lt;/button&gt;\n      &lt;/form&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default CuestionarioComponent;\n</code></pre>"},{"location":"codigo-json-form-local-storage/#explicacion-del-codigo_1","title":"Explicaci\u00f3n del C\u00f3digo","text":"<ol> <li>Estado para la respuesta (<code>useState</code>):</li> <li>Se crea un estado llamado <code>respuesta</code> para almacenar la opci\u00f3n seleccionada por el usuario.</li> <li> <p>Inicialmente, el valor de <code>respuesta</code> est\u00e1 vac\u00edo (<code>''</code>).</p> </li> <li> <p>Manejo de cambios en el <code>select</code>:</p> </li> <li>La funci\u00f3n <code>handleChange</code> se encarga de actualizar el estado <code>respuesta</code> cada vez que el usuario selecciona una opci\u00f3n del <code>select</code>.</li> <li> <p>El evento <code>onChange</code> se usa para detectar cambios en la selecci\u00f3n y actualizar el estado.</p> </li> <li> <p>Renderizado de las opciones (<code>opciones</code>):</p> </li> <li>Las opciones del <code>select</code> se extraen del array <code>opciones</code> que se encuentra en el JSON (<code>[\"1\", \"2\", \"3\", \"4\", \"5\"]</code>).</li> <li> <p>Usamos <code>.map()</code> para recorrer las opciones y generar un <code>&lt;option&gt;</code> para cada una de ellas.</p> </li> <li> <p>Env\u00edo del formulario:</p> </li> <li>La funci\u00f3n <code>handleSubmit</code> se ejecuta cuando el usuario env\u00eda el formulario. En este ejemplo, se muestra una alerta con la respuesta seleccionada.</li> </ol>"},{"location":"codigo-json-form-local-storage/#que-hace-el-componente","title":"\u00bfQu\u00e9 hace el componente?","text":"<ul> <li>El componente muestra una pregunta select donde el usuario puede elegir una opci\u00f3n de satisfacci\u00f3n (del 1 al 5).</li> <li>Cuando el formulario se env\u00eda, muestra la respuesta seleccionada en una alerta.</li> </ul>"},{"location":"codigo-json-form-local-storage/#resultado-en-el-navegador","title":"Resultado en el navegador","text":"<ol> <li>El usuario ver\u00e1 la pregunta: \"\u00bfQu\u00e9 tan satisfecho est\u00e1s con el contenido del curso?\".</li> <li>Podr\u00e1 seleccionar entre las opciones del 1 al 5.</li> <li>Al hacer clic en \"Enviar\", la opci\u00f3n seleccionada ser\u00e1 mostrada en una alerta.</li> </ol>"},{"location":"codigo-json-form-local-storage/#guardar-y-recuperar-respuestas-desde-localstorage","title":"Guardar y Recuperar Respuestas desde localStorage","text":"<p>El siguiente c\u00f3digo muestra solo c\u00f3mo manejar la lectura y escritura de las respuestas usando <code>localStorage</code>, y asume que el formulario ya existe en tu aplicaci\u00f3n.</p>"},{"location":"codigo-json-form-local-storage/#codigo-para-guardar-y-recuperar-datos-en-localstorage","title":"C\u00f3digo para Guardar y Recuperar Datos en <code>localStorage</code>:","text":"<pre><code>import React, { useState, useEffect } from 'react';\n\n// Asumiendo que las respuestas iniciales ya existen\nconst CuestionarioComponent: React.FC = () =&gt; {\n  // 1. Estado para almacenar las respuestas del cuestionario\n  const [respuestas, setRespuestas] = useState&lt;{ [key: string]: string }&gt;({\n    nombre: '',\n    edad: '',\n    sexo: '',\n  });\n\n  // 2. useEffect para cargar las respuestas desde localStorage cuando el componente se monta\n  useEffect(() =&gt; {\n    const storedRespuestas = localStorage.getItem('respuestasCuestionario');\n    if (storedRespuestas) {\n      setRespuestas(JSON.parse(storedRespuestas));  // Cargar respuestas desde localStorage\n    }\n  }, []);  // Solo se ejecuta una vez al montar el componente\n\n  // 3. Funci\u00f3n para manejar el cambio en los campos del formulario\n  const handleInputChange = (e: React.ChangeEvent&lt;HTMLInputElement | HTMLSelectElement&gt;) =&gt; {\n    const { name, value } = e.target;\n    const newRespuestas = { ...respuestas, [name]: value };\n    setRespuestas(newRespuestas); // Actualizar el estado\n\n    // 4. Guardar las respuestas actualizadas en localStorage\n    localStorage.setItem('respuestasCuestionario', JSON.stringify(newRespuestas)); // Guardar respuestas en localStorage\n  };\n\n  return (\n    &lt;div&gt;\n      {/* Aqu\u00ed ya tienes el formulario, el cual usar\u00e1 el estado y las funciones anteriores */}\n      {/* Ejemplo de un campo */}\n      &lt;div&gt;\n        &lt;label htmlFor=\"nombre\"&gt;Nombre:&lt;/label&gt;\n        &lt;input\n          id=\"nombre\"\n          name=\"nombre\"\n          type=\"text\"\n          value={respuestas.nombre}\n          onChange={handleInputChange}\n        /&gt;\n      &lt;/div&gt;\n\n      {/* Otros campos y el resto del formulario */}\n    &lt;/div&gt;\n  );\n};\n\nexport default CuestionarioComponent;\n</code></pre>"},{"location":"codigo-json-form-local-storage/#explicacion-del-codigo-localstorage","title":"Explicaci\u00f3n del C\u00f3digo localstorage:","text":"<ol> <li>Estado de Respuestas (<code>respuestas</code>):</li> <li> <p>Definimos un estado llamado <code>respuestas</code>, que es un objeto que almacenar\u00e1 las respuestas del cuestionario. Inicialmente, las respuestas son vac\u00edas.</p> </li> <li> <p>Recuperaci\u00f3n de Datos desde <code>localStorage</code>:</p> </li> <li> <p>Usamos el <code>useEffect</code> para leer los datos del cuestionario guardados en <code>localStorage</code> cuando el componente se monta. Si ya existen respuestas guardadas, las cargamos en el estado <code>respuestas</code>.</p> </li> <li> <p>Manejo de Cambios en los Campos:</p> </li> <li> <p>En la funci\u00f3n <code>handleInputChange</code>, cada vez que el usuario cambia el valor de un campo del formulario, actualizamos el estado <code>respuestas</code> y guardamos las respuestas modificadas en <code>localStorage</code> con <code>localStorage.setItem()</code>.</p> </li> <li> <p>Persistencia:</p> </li> <li>Cada vez que el estado <code>respuestas</code> cambia (debido a la modificaci\u00f3n de un campo), las nuevas respuestas se almacenan en <code>localStorage</code>. Esto asegura que los datos persistan incluso cuando se recargue la p\u00e1gina o se cierre y reabra el navegador.</li> </ol>"},{"location":"codigo-json-form-local-storage/#como-funciona-localstorage-en-este-codigo","title":"C\u00f3mo funciona <code>localStorage</code> en este c\u00f3digo","text":"<ul> <li>Guardar: Cada vez que el usuario cambia una respuesta en el formulario, se guarda autom\u00e1ticamente en <code>localStorage</code>.</li> <li>Recuperar: Cuando el componente se monta, buscamos si ya existen respuestas en <code>localStorage</code> y, si es as\u00ed, las cargamos para mostrarlas de nuevo en el formulario.</li> </ul>"},{"location":"codigo-json-form-local-storage/#prueba-del-componente","title":"Prueba del Componente","text":"<ol> <li>Completa los campos del formulario y presiona el bot\u00f3n \"Enviar\" o cualquier acci\u00f3n que el formulario realice.</li> <li>Recarga la p\u00e1gina (Ctrl + R o F5). Los campos se rellenar\u00e1n autom\u00e1ticamente con las respuestas guardadas en <code>localStorage</code>.</li> </ol>"},{"location":"codigo-validacion-form/","title":"Cuestionario y validaciones","text":""},{"location":"codigo-validacion-form/#cuestionario","title":"Cuestionario","text":"<p>El archivo con los cuestionarios para implemntar  cuestionario.json.</p>"},{"location":"codigo-validacion-form/#tipos-de-campos-en-cuestionario","title":"Tipos de campos en cuestionario","text":"<ol> <li>Campos de Tipo <code>text</code>:</li> <li>Descripci\u00f3n: Este tipo de campo es para entradas de texto simples. Se utiliza cuando necesitamos que el usuario ingrese una palabra o una peque\u00f1a frase.</li> <li>Ejemplo: Preguntar por el nombre o la edad del usuario.</li> <li>Validaci\u00f3n: Se puede aplicar una restricci\u00f3n sobre el n\u00famero de caracteres que se puede ingresar. Por ejemplo, en el caso del nombre, podemos pedir que tenga entre 3 y 50 caracteres.</li> </ol> <pre><code>{\n  \"id\": \"nombre\",\n  \"tipo\": \"text\",\n  \"pregunta\": \"\u00bfCu\u00e1l es tu nombre?\",\n  \"restricciones\": {\n    \"min\": 3,\n    \"max\": 50\n  }\n}\n</code></pre> <ol> <li>Campos de Tipo <code>textarea</code>:</li> <li>Descripci\u00f3n: Este tipo de campo se usa cuando se requiere que el usuario ingrese m\u00e1s texto o una respuesta m\u00e1s detallada. Es \u00fatil para comentarios, descripciones, o cualquier respuesta m\u00e1s extensa.</li> <li>Ejemplo: Preguntar sobre comentarios o sugerencias.</li> <li>Validaci\u00f3n: Al igual que el campo <code>text</code>, se puede validar el n\u00famero de caracteres, pero dado que el contenido puede ser m\u00e1s largo, las restricciones suelen ser mayores.</li> </ol> <pre><code>{\n  \"id\": \"comentarios\",\n  \"tipo\": \"textarea\",\n  \"pregunta\": \"\u00bfQu\u00e9 mejorar\u00edas en el curso?\",\n  \"restricciones\": {\n    \"min\": 15,\n    \"max\": 250\n  }\n}\n</code></pre> <ol> <li>Campos de Tipo <code>select</code>:</li> <li>Descripci\u00f3n: Este tipo de campo es una lista desplegable de opciones donde el usuario puede seleccionar una opci\u00f3n. Se utiliza cuando se desea limitar las respuestas a un conjunto de opciones predefinidas.</li> <li>Ejemplo: Preguntar sobre preferencias de sistema operativo o nivel de satisfacci\u00f3n.</li> <li>Validaci\u00f3n: No se suele validar la longitud de la respuesta, pero s\u00ed se puede limitar las opciones, como en el caso de un <code>select</code> para la pel\u00edcula favorita, donde el usuario debe elegir entre varias opciones.</li> </ol> <pre><code>{\n  \"id\": \"satisfaccion\",\n  \"tipo\": \"select\",\n  \"pregunta\": \"\u00bfQu\u00e9 tan satisfecho est\u00e1s con el contenido del curso?\",\n  \"opciones\": [\"1\", \"2\", \"3\", \"4\", \"5\"]\n}\n</code></pre> <ol> <li>Campos de Tipo <code>check</code> (Casillas de verificaci\u00f3n):</li> <li>Descripci\u00f3n: Este tipo de campo se utiliza cuando queremos que el usuario seleccione una o varias opciones de una lista. Se muestra como casillas de verificaci\u00f3n (checkboxes).</li> <li>Ejemplo: Preguntar sobre los dispositivos que usa regularmente o las pel\u00edculas que ha visto.</li> <li>Validaci\u00f3n: Se puede validar la cantidad de opciones que el usuario puede seleccionar. Por ejemplo, podemos pedir que seleccione hasta 2 dispositivos o una sola pel\u00edcula.</li> <li>Validaci\u00f3n en el JSON: Se puede especificar una validaci\u00f3n como <code>max_seleccionados</code> para limitar la cantidad de opciones que el usuario puede marcar.</li> </ol> <pre><code>{\n  \"id\": \"productos\",\n  \"tipo\": \"check\",\n  \"pregunta\": \"\u00bfQu\u00e9 dispositivos usas regularmente?\",\n  \"opciones\": [\"smartphone\", \"laptop\", \"tablet\", \"smartwatch\"],\n  \"validacion\": {\n    \"max_seleccionados\": 2\n  }\n}\n</code></pre>"},{"location":"codigo-validacion-form/#validaciones-comunes-en-los-campos","title":"Validaciones comunes en los campos","text":"<ol> <li>Restricci\u00f3n de Longitud (<code>min</code> y <code>max</code>):</li> <li>Descripci\u00f3n: Se utiliza para limitar la cantidad de caracteres que el usuario puede ingresar. Es \u00fatil para asegurarse de que las respuestas sean adecuadas. Por ejemplo, no queremos que un nombre tenga solo un car\u00e1cter o que un comentario sea excesivamente largo.</li> <li>Ejemplo: En un campo de texto como nombre, podemos exigir que tenga entre 3 y 50 caracteres.</li> </ol> <pre><code>{\n  \"restricciones\": {\n    \"min\": 3,\n    \"max\": 50\n  }\n}\n</code></pre> <ol> <li>Formato de Correo Electr\u00f3nico:</li> <li>Descripci\u00f3n: Si un campo est\u00e1 destinado a ingresar un correo electr\u00f3nico, es importante que el formato sea v\u00e1lido. Generalmente, se valida que el texto contenga el s\u00edmbolo @ y un dominio v\u00e1lido.</li> <li>Ejemplo: Validar que el correo est\u00e9 en el formato correcto y pertenezca a un dominio espec\u00edfico como <code>stucom.com</code>.</li> </ol> <pre><code>{\n  \"validacion\": {\n    \"formato\": \"email\",\n    \"dominio\": \"stucom.com\"\n  }\n}\n</code></pre> <ol> <li>Validaci\u00f3n de Edad:</li> <li>Descripci\u00f3n: A veces, se requiere que el usuario cumpla con una cierta edad m\u00ednima. Para esto, usamos una validaci\u00f3n de fecha de nacimiento.</li> <li>Ejemplo: Si necesitamos que el usuario tenga m\u00e1s de 17 a\u00f1os, calculamos la edad a partir de la fecha ingresada y la comparamos con la edad m\u00ednima permitida.</li> </ol> <pre><code>{\n  \"validacion\": {\n    \"min_edad\": 17\n  }\n}\n</code></pre> <ol> <li>Validaci\u00f3n de Selecci\u00f3n M\u00faltiple:</li> <li>Descripci\u00f3n: Si un campo permite seleccionar varias opciones (como <code>check</code>), podemos validar que el usuario seleccione un n\u00famero espec\u00edfico de opciones. Esto puede ser \u00fatil, por ejemplo, para elegir varios dispositivos o pel\u00edculas.</li> <li>Ejemplo: Validar que el usuario seleccione hasta 2 dispositivos.</li> </ol> <pre><code>{\n  \"validacion\": {\n    \"max_seleccionados\": 2\n  }\n}\n</code></pre> <ol> <li>Validaci\u00f3n de Opci\u00f3n \u00danica:</li> <li>Descripci\u00f3n: Si un campo permite seleccionar solo una opci\u00f3n (como un <code>select</code>), es importante que el usuario elija solo una. No se necesita una validaci\u00f3n adicional para esto, pero se asegura que solo se pueda seleccionar una opci\u00f3n a la vez.</li> <li>Ejemplo: El usuario debe seleccionar un sistema operativo.</li> </ol>"},{"location":"codigo-validacion-form/#validaciones-en-el-frontend","title":"Validaciones en el Frontend:","text":"<ol> <li>Validaci\u00f3n de Texto:</li> <li> <p>Se puede hacer mediante expresiones regulares o m\u00e9todos de validaci\u00f3n nativos en JavaScript, como <code>input.value.length</code> para controlar las longitudes m\u00ednimas y m\u00e1ximas.</p> </li> <li> <p>Validaci\u00f3n de Correo:</p> </li> <li> <p>Para validar correos electr\u00f3nicos, puedes usar una expresi\u00f3n regular o una funci\u00f3n predefinida en JavaScript para asegurarte de que el correo tenga el formato correcto.</p> </li> <li> <p>Validaci\u00f3n de Fecha:</p> </li> <li> <p>Para validar la edad, puedes comparar la fecha de nacimiento del usuario con la fecha actual y calcular si la edad cumple con el requisito m\u00ednimo.</p> </li> <li> <p>Validaci\u00f3n de Selecci\u00f3n M\u00faltiple:</p> </li> <li>En el caso de checkboxes o select multiple, puedes comprobar la cantidad de opciones seleccionadas usando <code>document.querySelectorAll()</code> para contar los elementos seleccionados.</li> </ol>"},{"location":"codigo-validacion-form/#conclusion","title":"Conclusi\u00f3n","text":"<p>Los formularios y sus validaciones son esenciales para obtener datos confiables y evitar errores. Cada tipo de campo se ajusta a una necesidad espec\u00edfica, y las validaciones permiten controlar la calidad de las respuestas.</p>"}]}