{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Documentaci\u00f3n del Curso de React con TypeScript","text":""},{"location":"#ejercicios","title":"EJERCICIOS","text":"<p>useEffect</p>"},{"location":"#contenido","title":"Contenido","text":""},{"location":"#1-fundamentos-de-react-y-typescript","title":"1. Fundamentos de React y TypeScript","text":"<ul> <li>Introducci\u00f3n a React</li> <li>Conceptos clave de React</li> <li>Uso de Props en React</li> <li>Uso de Props exetendidas en React</li> <li>Sintaxis</li> </ul>"},{"location":"#2-creacion-y-configuracion-de-un-proyecto","title":"2. Creaci\u00f3n y Configuraci\u00f3n de un Proyecto","text":"<ul> <li>Crear un proyecto con Vite</li> <li>Manejo de eventos tipados</li> <li>Uso de Hooks: useState y useEffect</li> </ul>"},{"location":"#3-navegacion-y-estado-en-react","title":"3. Navegaci\u00f3n y Estado en React","text":"<ul> <li>React Router en Vite</li> <li>Persistencia de datos y validaciones</li> </ul>"},{"location":"#4-desarrollo-y-depuracion","title":"4. Desarrollo y Depuraci\u00f3n","text":"<ul> <li>ESLint en React</li> <li>Depuraci\u00f3n en React</li> </ul>"},{"location":"#5-publicacion-de-un-proyecto","title":"5. Publicaci\u00f3n de un Proyecto","text":"<ul> <li>Publicar una p\u00e1gina con React</li> </ul>"},{"location":"#requisitos-previos","title":"Requisitos Previos","text":"<p>Para seguir este curso, se recomienda tener conocimientos b\u00e1sicos de: - HTML, CSS y JavaScript. - Programaci\u00f3n en TypeScript. - Uso de la terminal y manejo de npm.</p>"},{"location":"c_propsextendidas/","title":"C propsextendidas","text":""},{"location":"c_propsextendidas/#ejemplo-componente-miinput-con-props-extendidas","title":"\u2705 Ejemplo: Componente <code>MiInput</code> con props extendidas","text":"<pre><code>import React from \"react\";\n\ntype MiInputProps = {\n  etiqueta: string;\n} &amp; React.InputHTMLAttributes&lt;HTMLInputElement&gt;;\n\nconst MiInput: React.FC&lt;MiInputProps&gt; = ({ etiqueta, ...rest }) =&gt; {\n  return (\n    &lt;div&gt;\n      &lt;label&gt;{etiqueta}&lt;/label&gt;\n      &lt;input {...rest} /&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default MiInput;\n</code></pre>"},{"location":"c_propsextendidas/#uso-del-componente","title":"\ud83d\udd0d Uso del componente:","text":"<pre><code>&lt;MiInput\n  etiqueta=\"Nombre:\"\n  placeholder=\"Escribe tu nombre\"\n  type=\"text\"\n  className=\"input-estilo\"\n  value=\"Juan\"\n  onChange={(e) =&gt; console.log(e.target.value)}\n/&gt;\n</code></pre>"},{"location":"c_propsextendidas/#que-ganas","title":"\u2705 \u00bfQu\u00e9 gan\u00e1s?","text":"<ul> <li>Puedes seguir usando todas las props est\u00e1ndar de <code>&lt;input&gt;</code> (<code>type</code>, <code>placeholder</code>, <code>onChange</code>, etc.).</li> <li>Pod\u00e9s a\u00f1adir props personalizadas como <code>etiqueta</code>.</li> <li>El tipado de TypeScript sigue fuerte y seguro.</li> </ul> <p>\u00bfQuer\u00e9s que a\u00f1ada validaciones, estilos o algo m\u00e1s din\u00e1mico como estados internos?</p>"},{"location":"c_react/","title":"Conceptos Clave en React","text":""},{"location":"c_react/#1-react-y-typescript","title":"1. React y TypeScript","text":""},{"location":"c_react/#react","title":"React","text":"<p>React es una biblioteca de JavaScript utilizada para construir interfaces de usuario interactivas y eficientes. Se basa en un sistema de componentes reutilizables que permiten la creaci\u00f3n de interfaces escalables.</p>"},{"location":"c_react/#typescript","title":"TypeScript","text":"<p>TypeScript es un superset de JavaScript que agrega tipado est\u00e1tico, lo que permite mayor seguridad en el c\u00f3digo, autocompletado y mejores herramientas de depuraci\u00f3n.</p> <p>Ejemplo de un componente con TypeScript: <pre><code>import React from \"react\";\n\ntype Props = {\n  mensaje: string;\n};\n\nconst Saludo: React.FC&lt;Props&gt; = ({ mensaje }) =&gt; {\n  return &lt;h1&gt;{mensaje}&lt;/h1&gt;;\n};\n\nexport default Saludo;\n</code></pre></p>"},{"location":"c_react/#2-componentes-en-react","title":"2. Componentes en React","text":"<p>Los componentes son la base de React y permiten dividir la interfaz de usuario en piezas reutilizables. Se pueden clasificar en: - Componentes Funcionales: Se escriben como funciones de JavaScript y utilizan Hooks. - Componentes de Clase: Se escriben como clases y gestionan su propio estado mediante <code>this.state</code> (obsoleto en React moderno).</p> <p>Ejemplo de un componente funcional: <pre><code>const Boton = () =&gt; {\n  return &lt;button&gt;Haz clic&lt;/button&gt;;\n};\n</code></pre></p>"},{"location":"c_react/#3-jsx","title":"3. JSX","text":"<p>JSX (JavaScript XML) es una sintaxis que permite escribir HTML dentro de JavaScript, facilitando la creaci\u00f3n de interfaces din\u00e1micas.</p> <pre><code>graph TD;\n    A[JSX] --&gt;|Escribe HTML en JS| B[Renderizado]\n    B --&gt;|Transformado por Babel| C[JavaScript Puro]</code></pre> <p>Ejemplo de JSX: <pre><code>const Mensaje = () =&gt; {\n  return &lt;p&gt;Hola, mundo&lt;/p&gt;;\n};\n</code></pre></p>"},{"location":"c_react/#4-estado-en-react-usestate","title":"4. Estado en React (<code>useState</code>)","text":"<p>El hook <code>useState</code> permite manejar datos din\u00e1micos dentro de un componente.</p> <pre><code>graph TD;\n    A[Componente] --&gt;|Define Estado| B[useState]\n    B --&gt;|Cambia Estado| C[setState]\n    C --&gt;|Re-renderiza| D[UI Actualizada]</code></pre> <p>Ejemplo de <code>useState</code> en acci\u00f3n: <pre><code>const Contador = () =&gt; {\n  const [contador, setContador] = useState(0);\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Contador: {contador}&lt;/p&gt;\n      &lt;button onClick={() =&gt; setContador(contador + 1)}&gt;Incrementar&lt;/button&gt;\n    &lt;/div&gt;\n  );\n};\n</code></pre></p>"},{"location":"c_react/#5-efectos-secundarios-useeffect","title":"5. Efectos Secundarios (<code>useEffect</code>)","text":"<p><code>useEffect</code> permite ejecutar c\u00f3digo cuando el componente se monta o cuando cambian ciertas dependencias.</p> <pre><code>graph TD;\n    A[Componente Montado] --&gt;|Ejecuta Efecto| B[useEffect]\n    B --&gt;|Cambia Estado| C[setState]\n    C --&gt;|Re-renderiza| D[UI Actualizada]</code></pre> <p>Ejemplo de <code>useEffect</code> para llamadas a API: <pre><code>useEffect(() =&gt; {\n  fetch(\"https://jsonplaceholder.typicode.com/todos/1\")\n    .then(response =&gt; response.json())\n    .then(data =&gt; console.log(data));\n}, []);\n</code></pre></p>"},{"location":"c_react/#6-props-en-react","title":"6. Props en React","text":"<p>Las <code>props</code> (propiedades) permiten pasar informaci\u00f3n de un componente padre a un hijo.</p> <pre><code>graph TD;\n    A[Componente Padre] --&gt;|Pasa Datos| B[Componente Hijo]\n    B --&gt;|Usa Props| C[Renderizado]</code></pre> <p>Ejemplo de Props: <pre><code>const Mensaje = ({ texto }: { texto: string }) =&gt; {\n  return &lt;p&gt;{texto}&lt;/p&gt;;\n};\n</code></pre></p>"},{"location":"c_react/#7-virtual-dom","title":"7. Virtual DOM","text":"<p>React utiliza un Virtual DOM para mejorar el rendimiento al actualizar la UI.</p>"},{"location":"c_react/#graph-td-acambio-de-estado-genera-nuevo-virtual-dom-bcomparacion-con-dom-anterior-b-identifica-cambios-creconciliacion-c-actualiza-solo-lo-necesario-ddom-real","title":"<pre><code>graph TD;\n    A[Cambio de Estado] --&gt;|Genera Nuevo Virtual DOM| B[Comparaci\u00f3n con DOM Anterior]\n    B --&gt;|Identifica Cambios| C[Reconciliaci\u00f3n]\n    C --&gt;|Actualiza Solo Lo Necesario| D[DOM Real]</code></pre>","text":""},{"location":"c_react/#8-react-router","title":"8. React Router","text":"<p>React Router permite la navegaci\u00f3n entre p\u00e1ginas sin recargar la aplicaci\u00f3n.</p> <p>Ejemplo de rutas en React Router: <pre><code>import { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\n\nconst App = () =&gt; {\n  return (\n    &lt;Router&gt;\n      &lt;Routes&gt;\n        &lt;Route path=\"/\" element={&lt;Home /&gt;} /&gt;\n        &lt;Route path=\"/about\" element={&lt;About /&gt;} /&gt;\n      &lt;/Routes&gt;\n    &lt;/Router&gt;\n  );\n};\n</code></pre></p>"},{"location":"c_react/#9-manejo-de-eventos-en-react","title":"9. Manejo de Eventos en React","text":"<p>React maneja eventos como <code>onClick</code>, <code>onChange</code>, <code>onSubmit</code> de manera similar a JavaScript, pero con sintaxis propia de JSX.</p> <p>Ejemplo de evento onClick: <pre><code>const Boton = () =&gt; {\n  const handleClick = () =&gt; {\n    alert(\"Bot\u00f3n clickeado\");\n  };\n\n  return &lt;button onClick={handleClick}&gt;Clic aqu\u00ed&lt;/button&gt;;\n};\n</code></pre></p>"},{"location":"c_react/#10-persistencia-de-datos-localstorage","title":"10. Persistencia de Datos (<code>localStorage</code>)","text":"<p>React puede almacenar datos en <code>localStorage</code> para mantener informaci\u00f3n entre sesiones.</p>"},{"location":"c_react/#useeffect-localstoragesetitemdato-valor-guardado","title":"<pre><code>useEffect(() =&gt; {\n  localStorage.setItem(\"dato\", \"valor guardado\");\n}, []);\n</code></pre>","text":""},{"location":"c_react/#11-eslint-en-react","title":"11. ESLint en React","text":"<p>ESLint ayuda a mantener un c\u00f3digo limpio y estructurado.</p>"},{"location":"c_react/#instalacion-de-eslint-npm-install-eslint-save-dev","title":"<pre><code>// Instalaci\u00f3n de ESLint\nnpm install eslint --save-dev\n</code></pre>","text":""},{"location":"c_react/#12-publicacion-de-una-pagina-con-react","title":"12. Publicaci\u00f3n de una P\u00e1gina con React","text":"<p>Para publicar una aplicaci\u00f3n en GitHub Pages se siguen estos pasos:</p> <pre><code>graph TD;\n    A[Crear Proyecto con Vite] --&gt; B[Configurar React]\n    B --&gt; C[Escribir C\u00f3digo en App.tsx]\n    C --&gt; D[Test en Desarrollo]\n    D --&gt; E[Compilar Proyecto]\n    E --&gt; F[Publicar en GitHub Pages]</code></pre>"},{"location":"c_sintaxis/","title":"Sintaxis en React","text":"<p>Aqu\u00ed tienes una lista de las principales declaraciones y estructuras de c\u00f3digo utilizadas en React: \u2e3b</p> <p>1\ufe0f\u20e3 Declaraci\u00f3n de Variables</p> <p>React usa JavaScript moderno, as\u00ed que se utilizan:</p> <ul> <li>const (para valores inmutables)</li> <li>let (para valores que cambian)</li> <li>var (\u26a0\ufe0f evitar su uso)</li> </ul> <pre><code>const nombre = \"Juan\";\nlet edad = 25;\n</code></pre> <p>\u2e3b</p> <p>2\ufe0f\u20e3 Importaci\u00f3n y Exportaci\u00f3n de M\u00f3dulos</p> <p>React usa ES Modules (import/export) para manejar componentes y otros archivos.</p> <p>\u2705 Importar un m\u00f3dulo:</p> <p>import React from \"react\"; import MiComponente from \"./MiComponente\";</p> <p>\u2705 Exportaci\u00f3n nombrada:</p> <p>export function sumar(a, b) {   return a + b; }</p> <p>\u2705 Exportaci\u00f3n por defecto:</p> <pre><code>export default function MiComponente() {\n  return &lt;h1&gt;Hola!&lt;/h1&gt;;\n}\n</code></pre> <p>\u2705 Importaci\u00f3n de exportaci\u00f3n nombrada:</p> <pre><code>import { sumar } from \"./utils\";\n</code></pre> <p>\u2705 Importaci\u00f3n de exportaci\u00f3n por defecto:</p> <pre><code>import MiComponente from \"./MiComponente\";\n</code></pre> <p>\u2e3b</p> <p>3\ufe0f\u20e3 Declaraci\u00f3n de Funciones</p> <p>\u2705 Funciones tradicionales</p> <pre><code>function saludar() {\n  return \"Hola!\";\n}\n</code></pre> <p>\u2705 Funciones flecha (usadas com\u00fanmente en React)</p> <pre><code>const saludar = () =&gt; \"Hola!\";\n</code></pre> <p>\u2705 Funciones flecha con par\u00e1metros</p> <pre><code>const sumar = (a, b) =&gt; a + b;\n</code></pre> <p>\u2e3b</p> <p>4\ufe0f\u20e3 Componentes en React</p> <p>En React, los componentes pueden declararse de dos maneras:</p> <p>\u2705 Componente Funcional (moderno)</p> <pre><code>function MiComponente() {\n  return &lt;h1&gt;\u00a1Hola, React!&lt;/h1&gt;;\n}\n</code></pre> <p>\u2705 Componente de Clase (anticuado)</p> <pre><code>import React, { Component } from \"react\";\n\nclass MiComponente extends Component {\n  render() {\n    return &lt;h1&gt;\u00a1Hola, React!&lt;/h1&gt;;\n  }\n}\n</code></pre> <p>\u2e3b</p> <p>5\ufe0f\u20e3 Uso de Props (Propiedades)</p> <p>\u2705 Props en funci\u00f3n normal</p> <pre><code>function Mensaje(props) {\n  return &lt;h1&gt;{props.texto}&lt;/h1&gt;;\n}\n</code></pre> <p>\u2705 Props con desestructuraci\u00f3n</p> <p><pre><code>const Mensaje = ({ texto }) =&gt; &lt;h1&gt;{texto}&lt;/h1&gt;;\n</code></pre> \u2705 Uso del componente con props</p> <pre><code>&lt;Mensaje texto=\"Hola, mundo!\" /&gt;\n</code></pre> <p>\u2e3b</p> <p>6\ufe0f\u20e3 Estado con useState (Hook)</p> <p>\u2705 Declaraci\u00f3n de estado</p> <pre><code>import { useState } from \"react\";\n\nfunction Contador() {\n  const [contador, setContador] = useState(0);\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Contador: {contador}&lt;/p&gt;\n      &lt;button onClick={() =&gt; setContador(contador + 1)}&gt;Incrementar&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <p>\u2e3b</p> <p>7\ufe0f\u20e3 Manejo de Eventos</p> <p>\u2705 Eventos en React (camelCase y arrow functions)</p> <pre><code>function Boton() {\n  const manejarClick = () =&gt; alert(\"\u00a1Clickeado!\");\n\n  return &lt;button onClick={manejarClick}&gt;Clic aqu\u00ed&lt;/button&gt;;\n}\n</code></pre> <p>\u2705 Eventos con par\u00e1metros</p> <pre><code>function Mensaje({ texto }) {\n  const mostrarMensaje = (mensaje) =&gt; alert(mensaje);\n\n  return &lt;button onClick={() =&gt; mostrarMensaje(texto)}&gt;Mostrar&lt;/button&gt;;\n}\n</code></pre> <p>\u2e3b</p> <p>8\ufe0f\u20e3 Renderizado Condicional</p> <p>\u2705 Operador ternario (? :)</p> <pre><code>function Mensaje({ esVisible }) {\n  return esVisible ? &lt;p&gt;Mensaje visible&lt;/p&gt; : &lt;p&gt;Mensaje oculto&lt;/p&gt;;\n}\n</code></pre> <p>\u2705 Operador l\u00f3gico &amp;&amp; (renderizado corto)</p> <pre><code>function Mensaje({ esVisible }) {\n  return &lt;&gt;{esVisible &amp;&amp; &lt;p&gt;Mensaje visible&lt;/p&gt;}&lt;/&gt;;\n}\n</code></pre> <p>\u2e3b</p> <p>9\ufe0f\u20e3 Listas y .map()</p> <p>\u2705 Renderizado de listas con map()</p> <pre><code>function Lista() {\n  const frutas = [\"\ud83c\udf4e Manzana\", \"\ud83c\udf4c Pl\u00e1tano\", \"\ud83c\udf53 Fresa\"];\n\n  return (\n    &lt;ul&gt;\n      {frutas.map((fruta, index) =&gt; (\n        &lt;li key={index}&gt;{fruta}&lt;/li&gt;\n      ))}\n    &lt;/ul&gt;\n  );\n}\n</code></pre> <p>\ud83d\udd1f Efectos con useEffect (Hook)</p> <p>\u2705 Ejecutar c\u00f3digo cuando el componente se monta</p> <pre><code>import { useEffect } from \"react\";\n\nfunction Componente() {\n  useEffect(() =&gt; {\n    console.log(\"El componente se ha montado\");\n  }, []);\n\n  return &lt;p&gt;Hola&lt;/p&gt;;\n}\n</code></pre> <p>\u2705 Ejecutar c\u00f3digo cuando cambia una variable</p> <p><pre><code>import { useState, useEffect } from \"react\";\n\nfunction Contador() {\n  const [contador, setContador] = useState(0);\n\n  useEffect(() =&gt; {\n    console.log(\"El contador cambi\u00f3:\", contador);\n  }, [contador]);\n\n  return (\n    &lt;button onClick={() =&gt; setContador(contador + 1)}&gt;\n      Contador: {contador}\n    &lt;/button&gt;\n  );\n}\n</code></pre> \u2e3b</p> <p>\ud83d\udd22 Manejo de Formularios en React</p> <p>\u2705 Formulario controlado (usando useState)</p> <pre><code>import { useState } from \"react\";\n\nfunction Formulario() {\n  const [nombre, setNombre] = useState(\"\");\n\n  const manejarCambio = (e) =&gt; {\n    setNombre(e.target.value);\n  };\n\n  return (\n    &lt;form&gt;\n      &lt;input type=\"text\" value={nombre} onChange={manejarCambio} /&gt;\n      &lt;p&gt;Nombre: {nombre}&lt;/p&gt;\n    &lt;/form&gt;\n  );\n}\n</code></pre> <p>\u2e3b</p> <p>\ud83d\udccc Resumen</p> <p>\u2705 const y let para variables \u2705 import/export para m\u00f3dulos \u2705 Funciones tradicionales y flecha \u2705 Componentes funcionales y de clase \u2705 Uso de props con desestructuraci\u00f3n \u2705 Manejo de estado con useState \u2705 Eventos con onClick, onChange \u2705 Renderizado condicional con ? : y &amp;&amp; \u2705 Listas con .map() y key \u2705 Efectos secundarios con useEffect \u2705 Formularios controlados con useState</p>"},{"location":"e_useeffect/","title":"Ejercicios Autocontenidos sobre <code>useState</code> y <code>useEffect</code>","text":"<p>A continuaci\u00f3n se presentan tres ejercicios de complejidad creciente para practicar el uso de los hooks <code>useState</code> y <code>useEffect</code> en React. Cada uno incluye un planteamiento claro y, en algunos casos, fragmentos de c\u00f3digo a completar o analizar. Est\u00e1n dise\u00f1ados para fomentar la comprensi\u00f3n profunda y no pueden resolverse \u00fanicamente con una consulta directa.</p>"},{"location":"e_useeffect/#ejercicio-1-diagnostico-de-comportamiento","title":"\ud83e\udde9 Ejercicio 1: Diagn\u00f3stico de Comportamiento","text":"<p>Nivel: B\u00e1sico</p> <p>Analiza el siguiente componente y responde:</p> <ul> <li>\u00bfQu\u00e9 mostrar\u00e1 en pantalla?</li> <li>\u00bfPor qu\u00e9 se comporta de esa forma?</li> <li>\u00bfExiste alg\u00fan comportamiento no deseado o posible mejora?</li> </ul> <pre><code>const ContadorEstatico: React.FC = () =&gt; {\n  const [contador, setContador] = useState(0);\n\n  useEffect(() =&gt; {\n    setTimeout(() =&gt; {\n      setContador(contador + 1);\n    }, 1000);\n  }, []);\n\n  return &lt;h1&gt;Contador: {contador}&lt;/h1&gt;;\n};\n</code></pre>"},{"location":"e_useeffect/#ejercicio-2-construccion-guiada-con-condicion-oculta","title":"\ud83d\udee0\ufe0f Ejercicio 2: Construcci\u00f3n guiada con condici\u00f3n oculta","text":"<p>Nivel: Intermedio</p> <p>Construye un componente <code>Monitor</code> con las siguientes caracter\u00edsticas:</p> <ul> <li>Muestra un n\u00famero entero inicializado en 0.</li> <li>Cada 2 segundos, incrementa en +2 solo si el n\u00famero actual es divisible entre 4.</li> <li>Un bot\u00f3n permite reiniciar el n\u00famero a 0.</li> <li>Usa <code>useEffect</code> para manejar el intervalo correctamente.</li> </ul> <pre><code>// Esqueleto de ayuda\nconst Monitor: React.FC = () =&gt; {\n  const [valor, setValor] = useState(0);\n\n  useEffect(() =&gt; {\n    const intervalo = setInterval(() =&gt; {\n      // completar la condici\u00f3n\n    }, 2000);\n\n    return () =&gt; clearInterval(intervalo);\n  }, [/* dependencias */]);\n\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Valor: {valor}&lt;/h1&gt;\n      &lt;button onClick={() =&gt; setValor(0)}&gt;Reiniciar&lt;/button&gt;\n    &lt;/div&gt;\n  );\n};\n</code></pre> <p>Pregunta de reflexi\u00f3n: \u00bfQu\u00e9 sucede si el array de dependencias est\u00e1 vac\u00edo? \u00bfY si incluye <code>valor</code>?</p>"},{"location":"e_useeffect/#ejercicio-3-simulacion-asincronica-con-dependencias-dinamicas","title":"\ud83c\udf10 Ejercicio 3: Simulaci\u00f3n asincr\u00f3nica con dependencias din\u00e1micas","text":"<p>Nivel: Avanzado</p> <p>Crea un componente <code>UsuarioAleatorio</code> que cumpla los siguientes requisitos:</p> <ul> <li>Muestra un selector de categor\u00eda con opciones: <code>admin</code>, <code>editor</code>, <code>viewer</code>.</li> <li>Cada vez que se cambia la categor\u00eda, se muestra \u201cCargando\u2026\u201d y luego el nombre simulado de un usuario tras 1 segundo.</li> <li>Si se cambia la categor\u00eda antes de completarse la respuesta, la respuesta anterior debe ignorarse.</li> </ul> <pre><code>const UsuarioAleatorio: React.FC = () =&gt; {\n  const [categoria, setCategoria] = useState(\"admin\");\n  const [usuario, setUsuario] = useState&lt;string | null&gt;(null);\n\n  useEffect(() =&gt; {\n    let cancelado = false;\n    setUsuario(null);\n\n    const timeout = setTimeout(() =&gt; {\n      if (!cancelado) {\n        setUsuario(\"Usuario \" + Math.floor(Math.random() * 1000));\n      }\n    }, 1000);\n\n    return () =&gt; {\n      cancelado = true;\n      clearTimeout(timeout);\n    };\n  }, [categoria]);\n\n  return (\n    &lt;div&gt;\n      &lt;select value={categoria} onChange={(e) =&gt; setCategoria(e.target.value)}&gt;\n        &lt;option value=\"admin\"&gt;Admin&lt;/option&gt;\n        &lt;option value=\"editor\"&gt;Editor&lt;/option&gt;\n        &lt;option value=\"viewer\"&gt;Viewer&lt;/option&gt;\n      &lt;/select&gt;\n\n      &lt;p&gt;{usuario ? `Usuario: ${usuario}` : \"Cargando...\"}&lt;/p&gt;\n    &lt;/div&gt;\n  );\n};\n</code></pre> <p>Pregunta cr\u00edtica: \u00bfQu\u00e9 t\u00e9cnica usas para evitar condiciones de carrera entre efectos?</p>"},{"location":"e_useeffect/#recomendaciones-para-el-alumnado","title":"\u2705 Recomendaciones para el alumnado","text":"<ul> <li>Intenta razonar con l\u00e1piz y papel antes de escribir c\u00f3digo.</li> <li>Comenta cada l\u00ednea de tus componentes para justificar tu l\u00f3gica.</li> <li>Usa el navegador y las DevTools de React para depurar efectos y dependencias.</li> <li>Si lo implementas en Vite o CodeSandbox, recuerda observar los re-renderizados.</li> </ul>"},{"location":"f_ESLint/","title":"ESLint en React","text":"<p>ESLint es una herramienta que nos ayuda a detectar errores y mantener un c\u00f3digo limpio en aplicaciones JavaScript y TypeScript. En este apartado, aprenderemos:</p> <ul> <li>Qu\u00e9 es ESLint y por qu\u00e9 es importante.</li> <li>C\u00f3mo instalar y configurar ESLint en un proyecto React.</li> <li>C\u00f3mo usar ESLint para mejorar la calidad del c\u00f3digo.</li> </ul>"},{"location":"f_ESLint/#que-es-eslint-y-por-que-usarlo","title":"\u00bfQu\u00e9 es ESLint y por qu\u00e9 usarlo?","text":"<p>ESLint es un linter para JavaScript y TypeScript que analiza el c\u00f3digo en busca de: Errores de sintaxis y problemas comunes. Malas pr\u00e1cticas o c\u00f3digo obsoleto. Inconsistencias en el formato del c\u00f3digo (indentaci\u00f3n, espacios, comillas). </p> <p>Ejemplo de c\u00f3digo sin ESLint (mala pr\u00e1ctica):</p> <pre><code>function Saludar(props){\nreturn &lt;h1&gt;Hola {props.nombre}&lt;/h1&gt;}\n</code></pre> <p>Problemas detectados por ESLint: \u274c Falta de espacios adecuados. \u274c <code>props</code> no est\u00e1 tipado correctamente. \u274c Falta de indentaci\u00f3n adecuada.</p> <p>C\u00f3digo corregido con ESLint:</p> <p><pre><code>const Saludar: React.FC&lt;{ nombre: string }&gt; = ({ nombre }) =&gt; {\n    return &lt;h1&gt;Hola {nombre}&lt;/h1&gt;;\n};\n</code></pre> C\u00f3digo m\u00e1s limpio y legible. Mejores pr\u00e1cticas garantizadas.</p>"},{"location":"f_ESLint/#instalacion-de-eslint-en-un-proyecto-react-con-typescript","title":"Instalaci\u00f3n de ESLint en un Proyecto React con TypeScript","text":"<p>Si tienes un proyecto con Vite o Create React App, puedes instalar ESLint f\u00e1cilmente:</p> <p>Paso 1: Instalar ESLint en el proyecto</p> <pre><code>npm install eslint --save-dev\n</code></pre> <p>Paso 2: Inicializar ESLint</p> <pre><code>npx eslint --init\n</code></pre> <p>\ud83d\udd39 Responde a las preguntas de configuraci\u00f3n:  </p> <ul> <li>\u00bfC\u00f3mo quieres usar ESLint? \u2192 \"Para verificar errores de sintaxis y encontrar problemas\".  </li> <li>\u00bfQu\u00e9 tipo de m\u00f3dulo usas? \u2192 \"ESModules\".  </li> <li>\u00bfQu\u00e9 framework usas? \u2192 \"React\".  </li> <li>\u00bfQu\u00e9 formato de configuraci\u00f3n prefieres? \u2192 \"JSON\" o \"JavaScript\".  </li> </ul>"},{"location":"f_ESLint/#configuracion-basica-de-eslintrcjs","title":"Configuraci\u00f3n B\u00e1sica de <code>.eslintrc.js</code>","text":"<p>Despu\u00e9s de inicializar ESLint, el archivo de configuraci\u00f3n <code>.eslintrc.js</code> se ver\u00e1 as\u00ed:</p> <pre><code>module.exports = {\n    env: {\n        browser: true,\n        es2021: true\n    },\n    extends: [\n        \"eslint:recommended\",\n        \"plugin:react/recommended\",\n        \"plugin:@typescript-eslint/recommended\"\n    ],\n    parser: \"@typescript-eslint/parser\",\n    parserOptions: {\n        ecmaFeatures: {\n            jsx: true\n        },\n        ecmaVersion: \"latest\",\n        sourceType: \"module\"\n    },\n    plugins: [\"react\", \"@typescript-eslint\"],\n    rules: {\n        \"react/prop-types\": \"off\",\n        \"indent\": [\"error\", 4],\n        \"quotes\": [\"error\", \"double\"],\n        \"semi\": [\"error\", \"always\"]\n    }\n};\n</code></pre> <p>Explicaci\u00f3n de las reglas: <code>\"eslint:recommended\"</code> \u2192 Activa las reglas recomendadas de ESLint. <code>\"plugin:react/recommended\"</code> \u2192 Activa reglas espec\u00edficas para React. <code>\"plugin:@typescript-eslint/recommended\"</code> \u2192 Reglas para TypeScript. <code>\"quotes\": [\"error\", \"double\"]</code> \u2192 Obliga a usar comillas dobles. <code>\"semi\": [\"error\", \"always\"]</code> \u2192 Requiere punto y coma al final de las l\u00edneas.  </p>"},{"location":"f_ESLint/#ejecutar-eslint-en-el-proyecto","title":"Ejecutar ESLint en el Proyecto","text":"<p>Para analizar el c\u00f3digo, ejecuta:</p> <pre><code>npx eslint src --fix\n</code></pre> <p>Esto revisar\u00e1 el c\u00f3digo y corregir\u00e1 autom\u00e1ticamente errores menores.</p> <p>Ejemplo de error corregido por ESLint:</p> <pre><code>// C\u00f3digo con error\nconst suma = (a, b) =&gt; a+b\n\n// C\u00f3digo corregido autom\u00e1ticamente\nconst suma = (a, b) =&gt; a + b;\n</code></pre>"},{"location":"f_ESLint/#integracion-con-prettier-opcional","title":"Integraci\u00f3n con Prettier (Opcional)","text":"<p>Si quieres que ESLint corrija errores de formato autom\u00e1ticamente, combina ESLint con Prettier.</p> <p>Instalar Prettier y su plugin para ESLint</p> <pre><code>npm install --save-dev prettier eslint-config-prettier eslint-plugin-prettier\n</code></pre> <p>Actualizar <code>.eslintrc.js</code> para incluir Prettier</p> <pre><code>extends: [\n    \"eslint:recommended\",\n    \"plugin:react/recommended\",\n    \"plugin:@typescript-eslint/recommended\",\n    \"plugin:prettier/recommended\"\n]\n</code></pre> <p>Ejecutar ESLint con Prettier</p> <pre><code>npx eslint src --fix\n</code></pre> <p>Ahora ESLint corregir\u00e1 c\u00f3digo y aplicar\u00e1 formato autom\u00e1ticamente.</p>"},{"location":"f_ESLint/#eslint-en-vscode","title":"ESLint en VSCode","text":"<p>Para usar ESLint en Visual Studio Code: - Instala la extensi\u00f3n ESLint desde el Marketplace. - Agrega <code>\"editor.codeActionsOnSave\": { \"source.fixAll.eslint\": true }</code> en settings.json para corregir autom\u00e1ticamente al guardar.  </p> <p>Correcci\u00f3n autom\u00e1tica en cada guardado:</p> <pre><code>\"editor.codeActionsOnSave\": {\n    \"source.fixAll.eslint\": true\n}\n</code></pre>"},{"location":"f_ESLint/#conclusion","title":"Conclusi\u00f3n","text":"<p>ESLint ayuda a detectar errores y mejorar el c\u00f3digo. Podemos configurarlo para seguir reglas espec\u00edficas. Funciona con React y TypeScript sin problemas. Se puede integrar con Prettier para formato autom\u00e1tico. </p>"},{"location":"f_depuracion/","title":"Depuraci\u00f3n en React","text":"<p>Depurar una aplicaci\u00f3n React es clave para detectar errores y mejorar el rendimiento. En este apartado, exploraremos herramientas y t\u00e9cnicas esenciales para debuggear una aplicaci\u00f3n React de manera eficiente.</p>"},{"location":"f_depuracion/#react-developer-tools-react-devtools","title":"React Developer Tools (React DevTools)","text":"<p>Extensi\u00f3n para Chrome y Firefox que permite inspeccionar componentes React, revisar su estado y props en tiempo real.</p> <p>Instalaci\u00f3n: \ud83d\udd17 Descarga desde Chrome Web Store </p> <p>Uso: 1. Abre las herramientas de desarrollo (<code>F12</code> o <code>Ctrl + Shift + I</code> en Chrome). 2. Ve a la pesta\u00f1a \"Components\" para inspeccionar los componentes React. 3. Ve a la pesta\u00f1a \"Profiler\" para analizar el rendimiento.</p> <p>Ejemplo de inspecci\u00f3n de estado en DevTools </p> <pre><code>const [contador, setContador] = useState(0);\n</code></pre> <p>Puedes modificar el valor del <code>contador</code> directamente en DevTools para ver cambios en la UI.</p>"},{"location":"f_depuracion/#consola-de-javascript-consolelog","title":"Consola de JavaScript (<code>console.log</code>)","text":"<p>El m\u00e9todo m\u00e1s simple y efectivo para depurar valores y flujos en React.</p> <p>Ejemplo:</p> <pre><code>const handleClick = () =&gt; {\n    console.log(\"Bot\u00f3n clickeado\");\n    setContador(contador + 1);\n};\n</code></pre> <p>\u00datil para:</p> <ul> <li>Ver valores de variables en diferentes momentos.  </li> <li>Detectar si un evento o funci\u00f3n se ejecuta correctamente.  </li> </ul> <p>Ejemplo para depurar <code>useEffect</code>:</p> <pre><code>useEffect(() =&gt; {\n    console.log(\"El efecto se ejecut\u00f3 con estado:\", estado);\n}, [estado]);\n</code></pre>"},{"location":"f_depuracion/#depuracion-con-debugger-en-javascript","title":"Depuraci\u00f3n con <code>debugger</code> en JavaScript","text":"<p>El comando <code>debugger</code> permite pausar la ejecuci\u00f3n del c\u00f3digo y analizar variables en la consola del navegador.</p> <p>Ejemplo:</p> <pre><code>const handleClick = () =&gt; {\n    debugger; // La ejecuci\u00f3n se detendr\u00e1 aqu\u00ed\n    setContador(contador + 1);\n};\n</code></pre> <p>Paso a paso en DevTools: 1. Abre la consola (<code>F12</code> en Chrome). 2. Ejecuta el c\u00f3digo y cuando <code>debugger</code> se ejecute, la ejecuci\u00f3n se detendr\u00e1. 3. Inspecciona variables y estado en el panel \"Sources\".</p>"},{"location":"f_depuracion/#react-strictmode-y-advertencias-en-consola","title":"React StrictMode y Advertencias en Consola","text":"<p>React <code>StrictMode</code> ayuda a detectar problemas potenciales mostrando advertencias en la consola.</p> <p>Ejemplo en <code>main.tsx</code>:</p> <pre><code>&lt;React.StrictMode&gt;\n    &lt;App /&gt;\n&lt;/React.StrictMode&gt;\n</code></pre> <p>Detecta:</p> <ul> <li>Renderizados innecesarios.  </li> <li>M\u00e9todos obsoletos.  </li> <li>Errores en efectos secundarios (<code>useEffect</code>).  </li> </ul>"},{"location":"f_depuracion/#manejo-de-errores-con-trycatch-y-error-boundaries","title":"Manejo de Errores con <code>try/catch</code> y <code>Error Boundaries</code>","text":"<p>Si una API falla o hay un error inesperado en un componente, podemos capturarlo y evitar que toda la app se rompa.</p> <p>Ejemplo: Capturar errores en un <code>fetch</code></p> <pre><code>useEffect(() =&gt; {\n    const fetchData = async () =&gt; {\n        try {\n            const response = await fetch(\"https://api.example.com/data\");\n            if (!response.ok) throw new Error(\"Error en la API\");\n            const data = await response.json();\n            console.log(data);\n        } catch (error) {\n            console.error(\"Fallo en la carga de datos:\", error);\n        }\n    };\n\n    fetchData();\n}, []);\n</code></pre> <p>Ejemplo: Error Boundary en React</p> <pre><code>class ErrorBoundary extends React.Component {\n    state = { hasError: false };\n\n    static getDerivedStateFromError() {\n        return { hasError: true };\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return &lt;h2&gt;\u00a1Algo sali\u00f3 mal!&lt;/h2&gt;;\n        }\n        return this.props.children;\n    }\n}\n\n// Uso:\n&lt;ErrorBoundary&gt;\n    &lt;App /&gt;\n&lt;/ErrorBoundary&gt;\n</code></pre> <p>Evita que un error rompa toda la aplicaci\u00f3n.</p>"},{"location":"f_manejoEventos_tipados/","title":"Ficha T\u00e9cnica: Manejo de Eventos Tipados en TypeScript y Renderizado Virtual en React","text":""},{"location":"f_manejoEventos_tipados/#descripcion","title":"Descripci\u00f3n","text":"<p>En esta ficha se explican los conceptos clave del manejo de eventos en React con TypeScript (<code>onClick</code>, <code>onChange</code>) y el funcionamiento del renderizado virtual para optimizar la actualizaci\u00f3n del DOM en React.</p>"},{"location":"f_manejoEventos_tipados/#archivos-necesarios-y-estructura","title":"Archivos Necesarios y Estructura","text":"<ul> <li><code>App.tsx</code>: Componente principal con eventos tipados y renderizado optimizado.</li> </ul> <pre><code>mermaid\ngraph TD;\n    A[Componente Principal] --&gt;|Manejo de Eventos| B[Eventos Tipados]\n    B --&gt;|onClick - onChange| C[Interactividad]\n    A --&gt;|Renderizado con Virtual DOM| D[React Virtual DOM]\n    D --&gt;|Comparaci\u00f3n de cambios| E[Reconciliaci\u00f3n React]\n    E --&gt;|Actualizaci\u00f3n eficiente del DOM| F[Renderizado Optimizado]\n</code></pre>"},{"location":"f_manejoEventos_tipados/#manejo-de-eventos-en-react-con-typescript","title":"Manejo de Eventos en React con TypeScript","text":"<p>React permite capturar eventos del usuario como clics (<code>onClick</code>), cambios en inputs (<code>onChange</code>), entre otros, con tipado seguro en TypeScript.</p>"},{"location":"f_manejoEventos_tipados/#ejemplo-de-onclick","title":"Ejemplo de <code>onClick</code>","text":"<pre><code>import React from \"react\";\n\nconst BotonEvento: React.FC = () =&gt; {\n    const handleClick = (event: React.MouseEvent&lt;HTMLButtonElement&gt;) =&gt; {\n        console.log(\"Bot\u00f3n clickeado\", event);\n    };\n\n    return &lt;button onClick={handleClick}&gt;Haz clic aqu\u00ed&lt;/button&gt;;\n};\n\nexport default BotonEvento;\n</code></pre> <p>Explicaci\u00f3n: - <code>handleClick</code> recibe un evento <code>MouseEvent</code>, tipado como <code>React.MouseEvent&lt;HTMLButtonElement&gt;</code>. - React proporciona seguridad tipada evitando errores comunes en eventos.</p>"},{"location":"f_manejoEventos_tipados/#ejemplo-de-onchange","title":"Ejemplo de <code>onChange</code>","text":"<pre><code>import React, { useState } from \"react\";\n\nconst InputEvento: React.FC = () =&gt; {\n    const [texto, setTexto] = useState(\"\");\n\n    const handleChange = (event: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {\n        setTexto(event.target.value);\n    };\n\n    return (\n        &lt;div&gt;\n            &lt;input type=\"text\" value={texto} onChange={handleChange} /&gt;\n            &lt;p&gt;Texto ingresado: {texto}&lt;/p&gt;\n        &lt;/div&gt;\n    );\n};\n\nexport default InputEvento;\n</code></pre> <p>Explicaci\u00f3n: - <code>handleChange</code> captura el evento de entrada del usuario y actualiza el estado. - Se usa <code>React.ChangeEvent&lt;HTMLInputElement&gt;</code> para tipar correctamente el evento.</p>"},{"location":"f_manejoEventos_tipados/#conclusion","title":"Conclusi\u00f3n","text":"<p>Eventos tipados (onClick, onChange) permiten mayor seguridad y control en la UI.</p>"},{"location":"f_navegacion_Persistencia/","title":"Ficha T\u00e9cnica: Navegaci\u00f3n, Persistencia y Validaciones Autom\u00e1ticas en React","text":""},{"location":"f_navegacion_Persistencia/#descripcion","title":"Descripci\u00f3n","text":"<p>En esta ficha, exploraremos c\u00f3mo manejar la navegaci\u00f3n entre p\u00e1ginas utilizando <code>useState</code>, c\u00f3mo persistir datos en <code>localStorage</code> para evitar su p\u00e9rdida al recargar la aplicaci\u00f3n y c\u00f3mo emplear <code>useEffect</code> para validar datos autom\u00e1ticamente antes de avanzar en el flujo de la aplicaci\u00f3n.</p>"},{"location":"f_navegacion_Persistencia/#archivos-necesarios-y-estructura","title":"Archivos Necesarios y Estructura","text":"<ul> <li><code>App.tsx</code>: Componente principal que gestiona la navegaci\u00f3n y la persistencia de datos.</li> <li><code>localStorage</code>: API del navegador para almacenamiento persistente.</li> <li><code>useEffect</code>: Hook para validaciones autom\u00e1ticas.</li> </ul> <pre><code>graph TB;\n    Root --&gt;|Renderiza Componente de Navegaci\u00f3n| ComponenteNavegacion\n    ComponenteNavegacion --&gt;|P\u00e1gina: Bienvenida| PantallaBienvenida\n    ComponenteNavegacion --&gt;|P\u00e1gina: Formulario| PantallaFormulario\n    ComponenteNavegacion --&gt;|P\u00e1gina: Resumen| PantallaResumen\n    PantallaFormulario --&gt;|Guarda datos en localStorage| LocalStorage\n    LocalStorage --&gt;|Carga datos al iniciar| ComponenteNavegacion\n    ComponenteNavegacion --&gt;|useEffect valida datos| Validacion\n    Validacion --&gt;|Si datos completos, avanza a Resumen| PantallaResumen</code></pre>"},{"location":"f_navegacion_Persistencia/#codigo-del-proyecto","title":"C\u00f3digo del Proyecto","text":""},{"location":"f_navegacion_Persistencia/#componente-con-usestate-localstorage-y-useeffect","title":"Componente con <code>useState</code>, <code>localStorage</code> y <code>useEffect</code>","text":"<pre><code>import React, { useState, useEffect } from \"react\";\n\ntype FormularioDatos = {\n    nombre: string;\n    edad: string;\n};\n\nconst App: React.FC = () =&gt; {\n    const [pagina, setPagina] = useState&lt;string&gt;(\"bienvenida\");\n    const [datos, setDatos] = useState&lt;FormularioDatos&gt;(() =&gt; {\n        const datosGuardados = localStorage.getItem(\"formularioDatos\");\n        return datosGuardados ? JSON.parse(datosGuardados) : { nombre: \"\", edad: \"\" };\n    });\n\n    useEffect(() =&gt; {\n        localStorage.setItem(\"formularioDatos\", JSON.stringify(datos));\n    }, [datos]);\n\n    useEffect(() =&gt; {\n        if (datos.nombre &amp;&amp; datos.edad &amp;&amp; pagina === \"formulario\") {\n            setPagina(\"resumen\");\n        }\n    }, [datos, pagina]);\n\n    return (\n        &lt;div&gt;\n            {pagina === \"bienvenida\" &amp;&amp; (\n                &lt;&gt;\n                    &lt;h1&gt;Bienvenido&lt;/h1&gt;\n                    &lt;button onClick={() =&gt; setPagina(\"formulario\")}&gt;Ir al Formulario&lt;/button&gt;\n                &lt;/&gt;\n            )}\n\n            {pagina === \"formulario\" &amp;&amp; (\n                &lt;&gt;\n                    &lt;h1&gt;Formulario&lt;/h1&gt;\n                    &lt;input\n                        type=\"text\"\n                        placeholder=\"Nombre\"\n                        value={datos.nombre}\n                        onChange={(e) =&gt; setDatos({ ...datos, nombre: e.target.value })}\n                    /&gt;\n                    &lt;input\n                        type=\"number\"\n                        placeholder=\"Edad\"\n                        value={datos.edad}\n                        onChange={(e) =&gt; setDatos({ ...datos, edad: e.target.value })}\n                    /&gt;\n                &lt;/&gt;\n            )}\n\n            {pagina === \"resumen\" &amp;&amp; (\n                &lt;&gt;\n                    &lt;h1&gt;Resumen&lt;/h1&gt;\n                    &lt;p&gt;Nombre: {datos.nombre}&lt;/p&gt;\n                    &lt;p&gt;Edad: {datos.edad}&lt;/p&gt;\n                &lt;/&gt;\n            )}\n        &lt;/div&gt;\n    );\n};\n\nexport default App;\n</code></pre>"},{"location":"f_navegacion_Persistencia/#conceptos-clave","title":"Conceptos Clave","text":""},{"location":"f_navegacion_Persistencia/#navegacion-con-usestate","title":"Navegaci\u00f3n con <code>useState</code>","text":"<p>Podemos cambiar entre diferentes \"p\u00e1ginas\" controlando un estado.</p> <pre><code>const [pagina, setPagina] = useState(\"inicio\");\n\nreturn (\n    &lt;div&gt;\n        {pagina === \"inicio\" &amp;&amp; &lt;h1&gt;Inicio&lt;/h1&gt;}\n        {pagina === \"formulario\" &amp;&amp; &lt;h1&gt;Formulario&lt;/h1&gt;}\n        &lt;button onClick={() =&gt; setPagina(\"formulario\")}&gt;Ir al Formulario&lt;/button&gt;\n    &lt;/div&gt;\n);\n</code></pre>"},{"location":"f_navegacion_Persistencia/#persistencia-de-datos-con-localstorage","title":"Persistencia de Datos con <code>localStorage</code>","text":"<p>Guardamos datos en <code>localStorage</code> para que no se pierdan al recargar la p\u00e1gina.</p> <pre><code>useEffect(() =&gt; {\n    localStorage.setItem(\"nombreUsuario\", nombre);\n}, [nombre]);\n</code></pre> <p>Recuperar datos al cargar:</p> <pre><code>const [nombre, setNombre] = useState(() =&gt; {\n    return localStorage.getItem(\"nombreUsuario\") || \"\";\n});\n</code></pre>"},{"location":"f_navegacion_Persistencia/#validaciones-automaticas-con-useeffect","title":"Validaciones Autom\u00e1ticas con <code>useEffect</code>","text":"<p>Podemos verificar datos y tomar decisiones sin intervenci\u00f3n del usuario.</p> <pre><code>useEffect(() =&gt; {\n    if (nombre.length &gt; 3) {\n        console.log(\"Nombre v\u00e1lido\");\n    }\n}, [nombre]);\n</code></pre>"},{"location":"f_navegacion_Persistencia/#conclusion","title":"Conclusi\u00f3n","text":"<ul> <li>Usamos <code>useState</code> para manejar la navegaci\u00f3n entre p\u00e1ginas.</li> <li>Persistimos datos con <code>localStorage</code>, evitando p\u00e9rdidas al recargar.</li> <li>Validamos autom\u00e1ticamente con <code>useEffect</code>, mejorando la experiencia de usuario.</li> <li>Creamos una navegaci\u00f3n fluida sin necesidad de un router.</li> </ul>"},{"location":"f_props/","title":"Ficha T\u00e9cnica: Uso B\u00e1sico de Props para un Formulario de Login en React","text":""},{"location":"f_props/#descripcion","title":"Descripci\u00f3n","text":"<p>En esta ficha se explica c\u00f3mo usar <code>props</code> en React para crear un formulario de login reutilizable. Se manejar\u00e1n entradas de usuario con <code>props</code>, permitiendo personalizar el formulario seg\u00fan las necesidades.</p>"},{"location":"f_props/#archivos-necesarios-y-estructura","title":"Archivos Necesarios y Estructura","text":"<ul> <li><code>App.tsx</code>: Componente principal que renderiza el formulario.</li> <li><code>LoginForm.tsx</code>: Componente reutilizable para el formulario de login.</li> </ul> <pre><code>graph TD;\n    A[Componente Principal] --&gt;|Pasa Props| B[LoginForm]\n    B --&gt;|Renderiza Inputs con Props| C[Formulario Login]\n    C --&gt;|Captura Datos del Usuario| D[Manejo de Estado]\n    D --&gt;|Env\u00eda Datos a Funci\u00f3n de Autenticaci\u00f3n| E[Autenticaci\u00f3n]</code></pre>"},{"location":"f_props/#conceptos-clave","title":"Conceptos Clave","text":""},{"location":"f_props/#1-que-son-las-props","title":"1. \u00bfQu\u00e9 son las <code>props</code>?","text":"<p>Las <code>props</code> (propiedades) permiten pasar datos de un componente padre a un componente hijo. Son inmutables y permiten crear componentes reutilizables.</p>"},{"location":"f_props/#codigo-del-proyecto","title":"C\u00f3digo del Proyecto","text":""},{"location":"f_props/#paso-1-crear-el-componente","title":"Paso 1: Crear el Componente ``","text":"<pre><code>import React, { useState } from \"react\";\n\n// Definimos la interfaz para las props del formulario\ninterface LoginFormProps {\n    titulo: string;\n    onLogin: (usuario: string, password: string) =&gt; void;\n}\n\nconst LoginForm: React.FC&lt;LoginFormProps&gt; = ({ titulo, onLogin }) =&gt; {\n    const [usuario, setUsuario] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n\n    const handleSubmit = (e: React.FormEvent) =&gt; {\n        e.preventDefault();\n        onLogin(usuario, password);\n    };\n\n    return (\n        &lt;div&gt;\n            &lt;h2&gt;{titulo}&lt;/h2&gt;\n            &lt;form onSubmit={handleSubmit}&gt;\n                &lt;input\n                    type=\"text\"\n                    placeholder=\"Usuario\"\n                    value={usuario}\n                    onChange={(e) =&gt; setUsuario(e.target.value)}\n                /&gt;\n                &lt;input\n                    type=\"password\"\n                    placeholder=\"Contrase\u00f1a\"\n                    value={password}\n                    onChange={(e) =&gt; setPassword(e.target.value)}\n                /&gt;\n                &lt;button type=\"submit\"&gt;Ingresar&lt;/button&gt;\n            &lt;/form&gt;\n        &lt;/div&gt;\n    );\n};\n\nexport default LoginForm;\n</code></pre>"},{"location":"f_props/#paso-2-usar-props-en-onlogin","title":"Paso 2: Usar <code>props</code> en <code>onLogin</code>","text":"<pre><code>import React from \"react\";\nimport LoginForm from \"./LoginForm\";\n\nconst App: React.FC = () =&gt; {\n    const handleLogin = (usuario: string, password: string) =&gt; {\n        console.log(\"Usuario:\", usuario);\n        console.log(\"Contrase\u00f1a:\", password);\n    };\n\n    return &lt;LoginForm titulo=\"Iniciar Sesi\u00f3n\" onLogin={handleLogin} /&gt;;\n};\n\nexport default App;\n</code></pre> <p>Explicaci\u00f3n:</p> <ul> <li><code>titulo</code>: Se pasa como prop para personalizar el t\u00edtulo del formulario.</li> <li><code>onLogin</code>: Funci\u00f3n manejada por el componente padre (<code>App.tsx</code>) para capturar datos ingresados.</li> </ul>"},{"location":"f_props/#conclusion","title":"Conclusi\u00f3n","text":"<ul> <li><code>props</code> permiten crear formularios reutilizables y personalizables.</li> <li>Se pueden pasar funciones como <code>props</code> para manejar eventos y autenticaci\u00f3n.</li> <li><code>useState</code> permite manejar la entrada de usuario dentro del formulario.</li> <li>La separaci\u00f3n de componentes mejora la mantenibilidad del c\u00f3digo.</li> </ul>"},{"location":"f_publicar_pagina_simple/","title":"Ficha T\u00e9cnica: Publicar una P\u00e1gina Simple con React","text":""},{"location":"f_publicar_pagina_simple/#descripcion","title":"Descripci\u00f3n","text":"<p>En esta ficha se describe el proceso b\u00e1sico para crear y desplegar una p\u00e1gina web simple con React, mostrando un \u00fanico texto. Se utilizar\u00e1 Vite para crear el proyecto, se configurar\u00e1 y se desplegar\u00e1 en GitHub Pages.</p>"},{"location":"f_publicar_pagina_simple/#archivos-necesarios-y-estructura","title":"Archivos Necesarios y Estructura","text":"<ul> <li><code>index.html</code>: Archivo base donde se inyectar\u00e1 la aplicaci\u00f3n React.</li> <li><code>App.tsx</code>: Componente principal que renderiza el texto.</li> <li><code>main.tsx</code>: Archivo donde se monta la aplicaci\u00f3n en el DOM.</li> <li><code>package.json</code>: Archivo de configuraci\u00f3n del proyecto.</li> </ul> <pre><code>graph TD;\n    A[Crear Proyecto con Vite] --&gt; B[Configurar React]\n    B --&gt; C[Escribir C\u00f3digo en App.tsx]\n    C --&gt; D[Test en Desarrollo]\n    D --&gt; E[Compilar Proyecto]\n    E --&gt; F[Publicar en GitHub Pages]</code></pre>"},{"location":"f_publicar_pagina_simple/#paso-1-crear-el-proyecto-con-vite","title":"Paso 1: Crear el Proyecto con Vite","text":"<p>Ejecuta el siguiente comando en la terminal para generar un nuevo proyecto React:</p> <pre><code>npm create vite@latest mi-pagina --template react\n</code></pre> <p>Luego, accede al directorio del proyecto: <pre><code>cd mi-pagina\nnpm install\n</code></pre></p>"},{"location":"f_publicar_pagina_simple/#paso-2-configurar-react","title":"Paso 2: Configurar React","text":"<p>Edita <code>App.tsx</code> para mostrar un texto simple:</p> <pre><code>import React from \"react\";\n\nconst App: React.FC = () =&gt; {\n    return &lt;h1&gt;\u00a1Hola, esta es mi p\u00e1gina en React!&lt;/h1&gt;;\n};\n\nexport default App;\n</code></pre>"},{"location":"f_publicar_pagina_simple/#paso-3-montar-la-aplicacion","title":"Paso 3: Montar la Aplicaci\u00f3n","text":"<p>En <code>main.tsx</code>, renderizamos el componente en el DOM:</p> <pre><code>import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nif (rootElement) {\n    const root = ReactDOM.createRoot(rootElement);\n    root.render(\n        &lt;React.StrictMode&gt;\n            &lt;App /&gt;\n        &lt;/React.StrictMode&gt;\n    );\n}\n</code></pre>"},{"location":"f_publicar_pagina_simple/#paso-4-ejecutar-en-modo-desarrollo","title":"Paso 4: Ejecutar en Modo Desarrollo","text":"<p>Para verificar que todo funciona correctamente, ejecuta:</p> <pre><code>npm run dev\n</code></pre> <p>Abre la URL que aparece en la terminal (por defecto <code>http://localhost:5173/</code>).</p>"},{"location":"f_publicar_pagina_simple/#paso-5-compilar-para-produccion","title":"Paso 5: Compilar para Producci\u00f3n","text":"<p>Para generar la versi\u00f3n optimizada del proyecto:</p> <pre><code>npm run build\n</code></pre> <p>Esto crear\u00e1 una carpeta <code>dist/</code> con los archivos listos para ser desplegados.</p>"},{"location":"f_publicar_pagina_simple/#conclusion","title":"Conclusi\u00f3n","text":"<ul> <li>Creamos una aplicaci\u00f3n React con Vite.</li> <li>Mostramos un simple texto en pantalla.</li> <li>Compilamos y publicamos en GitHub Pages.</li> <li>Ahora tenemos una p\u00e1gina en l\u00ednea con React. \ud83d\ude80</li> </ul>"},{"location":"f_react_router/","title":"Ficha T\u00e9cnica: React Router en Vite","text":""},{"location":"f_react_router/#descripcion","title":"Descripci\u00f3n","text":"<p>En esta ficha se explican los conceptos clave sobre el uso de React Router en proyectos creados con Vite para gestionar la navegaci\u00f3n entre p\u00e1ginas.</p>"},{"location":"f_react_router/#archivos-necesarios-y-estructura","title":"Archivos Necesarios y Estructura","text":"<ul> <li><code>App.tsx</code>: Componente principal que define las rutas.</li> <li><code>pages/Home.tsx</code>: P\u00e1gina de inicio.</li> <li><code>pages/About.tsx</code>: P\u00e1gina \"Acerca de\".</li> <li><code>pages/Contact.tsx</code>: P\u00e1gina de contacto.</li> </ul> <pre><code>graph TD;\n    A[App.tsx] --&gt;|Define Rutas| B[Home.tsx]\n    A --&gt;|Define Rutas| C[About.tsx]\n    A --&gt;|Define Rutas| D[Contact.tsx]\n    A --&gt;|Incluye Navegaci\u00f3n| E[NavBar.tsx]</code></pre>"},{"location":"f_react_router/#1-instalacion-de-react-router","title":"1. Instalaci\u00f3n de React Router","text":"<p>Para habilitar la navegaci\u00f3n en un proyecto de React con Vite, primero instalamos React Router:</p> <pre><code>npm install react-router-dom\n</code></pre>"},{"location":"f_react_router/#2-configuracion-de-rutas-en-apptsx","title":"2. Configuraci\u00f3n de Rutas en <code>App.tsx</code>","text":"<pre><code>import React from \"react\";\nimport { BrowserRouter as Router, Routes, Route, Link } from \"react-router-dom\";\nimport Home from \"./pages/Home\";\nimport About from \"./pages/About\";\nimport Contact from \"./pages/Contact\";\n\nconst App: React.FC = () =&gt; {\n    return (\n        &lt;Router&gt;\n            &lt;nav&gt;\n                &lt;Link to=\"/\"&gt;Inicio&lt;/Link&gt; |\n                &lt;Link to=\"/about\"&gt;Acerca de&lt;/Link&gt; |\n                &lt;Link to=\"/contact\"&gt;Contacto&lt;/Link&gt;\n            &lt;/nav&gt;\n\n            &lt;Routes&gt;\n                &lt;Route path=\"/\" element={&lt;Home /&gt;} /&gt;\n                &lt;Route path=\"/about\" element={&lt;About /&gt;} /&gt;\n                &lt;Route path=\"/contact\" element={&lt;Contact /&gt;} /&gt;\n            &lt;/Routes&gt;\n        &lt;/Router&gt;\n    );\n};\n\nexport default App;\n</code></pre> <p>Explicaci\u00f3n:</p> <ul> <li><code>BrowserRouter</code>: Proporciona la funcionalidad de enrutamiento basada en URL.</li> <li><code>Routes</code> y <code>Route</code>: Definen qu\u00e9 componente se renderiza en cada URL.</li> <li><code>Link</code>: Se usa en lugar de <code>&lt;a&gt;</code> para evitar recargas de la p\u00e1gina.</li> </ul>"},{"location":"f_react_router/#3-creacion-de-componentes-de-pagina","title":"3. Creaci\u00f3n de Componentes de P\u00e1gina","text":""},{"location":"f_react_router/#pagina-de-inicio-hometsx","title":"P\u00e1gina de Inicio (<code>Home.tsx</code>)","text":"<pre><code>import React from \"react\";\n\nconst Home: React.FC = () =&gt; {\n    return &lt;h1&gt;P\u00e1gina de Inicio&lt;/h1&gt;;\n};\n\nexport default Home;\n</code></pre>"},{"location":"f_react_router/#pagina-acerca-de-abouttsx","title":"P\u00e1gina \"Acerca de\" (<code>About.tsx</code>)","text":"<pre><code>import React from \"react\";\n\nconst About: React.FC = () =&gt; {\n    return &lt;h1&gt;Sobre Nosotros&lt;/h1&gt;;\n};\n\nexport default About;\n</code></pre>"},{"location":"f_react_router/#pagina-de-contacto-contacttsx","title":"P\u00e1gina de Contacto (<code>Contact.tsx</code>)","text":"<pre><code>import React from \"react\";\n\nconst Contact: React.FC = () =&gt; {\n    return &lt;h1&gt;Contacto&lt;/h1&gt;;\n};\n\nexport default Contact;\n</code></pre>"},{"location":"f_react_router/#4-ejecucion-y-pruebas","title":"4. Ejecuci\u00f3n y Pruebas","text":"<p>Para probar la aplicaci\u00f3n en el navegador, ejecuta:</p> <pre><code>npm run dev\n</code></pre> <p>Abre la URL que aparece en la terminal (por defecto <code>http://localhost:5173/</code>) y navega entre las p\u00e1ginas usando los enlaces.</p>"},{"location":"f_react_router/#conclusion","title":"Conclusi\u00f3n","text":"<ul> <li>React Router permite gestionar la navegaci\u00f3n entre p\u00e1ginas en aplicaciones SPA.</li> <li>El uso de <code>Link</code> optimiza la navegaci\u00f3n sin recargar la p\u00e1gina.</li> <li>Cada ruta carga un componente espec\u00edfico para mejorar la organizaci\u00f3n del c\u00f3digo.</li> </ul>"},{"location":"f_useState_useEffects/","title":"Ficha T\u00e9cnica: Uso B\u00e1sico de useState y useEffect en React","text":""},{"location":"f_useState_useEffects/#descripcion","title":"Descripci\u00f3n","text":"<p>En esta ficha se explican los conceptos b\u00e1sicos de los hooks <code>useState</code> y <code>useEffect</code> en React, incluyendo su funcionalidad, sintaxis y ejemplos pr\u00e1cticos.</p>"},{"location":"f_useState_useEffects/#archivos-necesarios-y-estructura","title":"Archivos Necesarios y Estructura","text":"<ul> <li><code>App.tsx</code>: Componente principal donde implementaremos <code>useState</code> y <code>useEffect</code>.</li> </ul> <pre><code>graph TD;\n    A[Componente Principal] --&gt;|Define Estado con useState| B[Estado del Componente]\n    B --&gt;|Cambio de Estado con setState| C[Renderizado del Componente]\n    A --&gt;|Ejecuta Efectos Secundarios con useEffect| D[Efectos del Componente]\n    D --&gt;|Se Ejecuta en Montaje o Cambio de Dependencias| E[Actualizaci\u00f3n de Estado]</code></pre>"},{"location":"f_useState_useEffects/#conceptos-clave","title":"Conceptos Clave","text":""},{"location":"f_useState_useEffects/#1-manejo-del-estado","title":"1. ``: Manejo del Estado","text":"<p>El hook <code>useState</code> permite a los componentes funcionales manejar estados internos.</p>"},{"location":"f_useState_useEffects/#ejemplo-basico-de","title":"Ejemplo B\u00e1sico de ``","text":"<pre><code>import React, { useState } from \"react\";\n\nconst Contador: React.FC = () =&gt; {\n    const [contador, setContador] = useState(0);\n\n    return (\n        &lt;div&gt;\n            &lt;h1&gt;Contador: {contador}&lt;/h1&gt;\n            &lt;button onClick={() =&gt; setContador(contador + 1)}&gt;Incrementar&lt;/button&gt;\n        &lt;/div&gt;\n    );\n};\n\nexport default Contador;\n</code></pre> <p>Explicaci\u00f3n:</p> <ul> <li><code>useState(0)</code>: Inicializa el estado <code>contador</code> con valor <code>0</code>.</li> <li><code>setContador(contador + 1)</code>: Actualiza el estado cuando se presiona el bot\u00f3n.</li> <li>Cada actualizaci\u00f3n de estado provoca un re-renderizado del componente.</li> </ul>"},{"location":"f_useState_useEffects/#2-manejo-de-efectos-secundarios","title":"2. ``: Manejo de Efectos Secundarios","text":"<p>El hook <code>useEffect</code> permite ejecutar efectos secundarios en componentes funcionales.</p>"},{"location":"f_useState_useEffects/#ejemplo-basico-de-usestate","title":"Ejemplo B\u00e1sico de <code>useState</code>","text":"<pre><code>import React, { useState, useEffect } from \"react\";\n\nconst Temporizador: React.FC = () =&gt; {\n    const [segundos, setSegundos] = useState(0);\n\n    useEffect(() =&gt; {\n        const intervalo = setInterval(() =&gt; {\n            setSegundos((s) =&gt; s + 1);\n        }, 1000);\n\n        return () =&gt; clearInterval(intervalo);\n    }, []);\n\n    return &lt;h1&gt;Tiempo transcurrido: {segundos} segundos&lt;/h1&gt;;\n};\n\nexport default Temporizador;\n</code></pre> <p>Explicaci\u00f3n:</p> <ul> <li><code>useEffect(() =&gt; { ... }, [])</code>: Se ejecuta una sola vez al montar el componente.</li> <li><code>setInterval()</code>: Inicia un contador que incrementa el estado cada segundo.</li> <li><code>return () =&gt; clearInterval(intervalo)</code>: Limpia el intervalo cuando el componente se desmonta.</li> </ul>"},{"location":"f_useState_useEffects/#3-combinando-usestate-y-useeffects","title":"3. Combinando <code>useState</code> y <code>useEffects</code>","text":"<p>Podemos combinar ambos hooks para actualizar el estado con datos externos, por ejemplo, una API.</p>"},{"location":"f_useState_useEffects/#ejemplo-cargar-datos-desde-una-api","title":"Ejemplo: Cargar Datos desde una API","text":"<pre><code>import React, { useState, useEffect } from \"react\";\n\nconst Usuario: React.FC = () =&gt; {\n    const [usuario, setUsuario] = useState&lt;{ nombre: string } | null&gt;(null);\n\n    useEffect(() =&gt; {\n        fetch(\"https://jsonplaceholder.typicode.com/users/1\")\n            .then((res) =&gt; res.json())\n            .then((data) =&gt; setUsuario({ nombre: data.name }));\n    }, []);\n\n    return &lt;h1&gt;Usuario: {usuario ? usuario.nombre : \"Cargando...\"}&lt;/h1&gt;;\n};\n\nexport default Usuario;\n</code></pre> <p>Explicaci\u00f3n:</p> <ul> <li><code>useEffect</code> llama a la API al montar el componente.</li> <li><code>setUsuario({ nombre: data.name })</code> almacena la respuesta en el estado.</li> <li>El usuario se muestra cuando los datos se han cargado.</li> </ul>"},{"location":"f_useState_useEffects/#conclusion","title":"Conclusi\u00f3n","text":"<ul> <li><code>useState</code> permite manejar valores din\u00e1micos dentro de un componente.</li> <li><code>useEffect</code> ejecuta efectos secundarios como peticiones a APIs o temporizadores.</li> <li>Combinando ambos, podemos manejar actualizaciones y sincronizaci\u00f3n de datos eficientemente.</li> </ul>"},{"location":"t_CrearProyecto/","title":"Crear un Proyecto","text":"Crear el proyecto con **Vite** es m\u00e1s r\u00e1pido y ligero. \u00bfPor qu\u00e9 utilizamos Vite para trabajar con React   Vite es una herramienta de construcci\u00f3n moderna que ofrece varias ventajas sobre otras soluciones como Create React App (CRA). Porque  1. **\ud83d\ude80 Inicio ultrarr\u00e1pido**      - Usa **ES Modules** para cargar solo los archivos necesarios, lo que hace que el desarrollo sea mucho m\u00e1s r\u00e1pido. 2. **\u26a1 Hot Module Replacement (HMR) instant\u00e1neo**      - Los cambios en el c\u00f3digo se reflejan casi **al instante**, sin necesidad de recargar toda la aplicaci\u00f3n. 3. **\ud83d\udce6 Compilaci\u00f3n m\u00e1s r\u00e1pida**      - Utiliza **esbuild**, un compilador escrito en Go que es mucho m\u00e1s r\u00e1pido que Webpack. 4. **\ud83d\udee0\ufe0f Configuraci\u00f3n simplificada**      - Con pocos comandos tienes un entorno listo para React con TypeScript sin configuraci\u00f3n extra. 5. **\ud83d\udd0c Soporte para m\u00faltiples frameworks**      - Vite no solo funciona con React, sino tambi\u00e9n con Vue, Svelte y otros frameworks modernos.  ## **Referencias oficiales \ud83d\udcda**  \ud83d\udd17 **Vite**: [https://vitejs.dev/](https://vitejs.dev/)    <p>Comando para crear un nuevo proyecto con Vite:</p> <pre><code>npm create vite@latest nombre-del-proyecto --template react\n````\n\n```code\n? Select a framework: \u203a - Use arrow-keys. Return to submit.\n    Vanilla\n    Vue\n\u276f   React\n    Preact\n    Lit\n    Svelte\n    Solid\n    Qwik\n    Angular\n    Others\n\n\u2714 Select a framework: \u203a React\n? Select a variant: \u203a - Use arrow-keys. Return to submit.\n\u276f   TypeScript\n    TypeScript + SWC\n    JavaScript\n    JavaScript + SWC\n    React Router v7 \u2197\n</code></pre> <p>Reemplaza <code>nombre-del-proyecto</code> con el nombre que desees.</p> <p>Pasos</p> <ul> <li>Entrar en la carpeta del proyecto:</li> </ul> <pre><code>cd nombre-del-proyecto\n</code></pre> <ul> <li>Instalar dependencias:</li> </ul> <pre><code>npm install\n</code></pre> <ul> <li>Ejecutar el Servidor de Desarrollo</li> </ul> <p>Para ver la aplicaci\u00f3n en el navegador, ejecuta:</p> <pre><code>npm run dev\n</code></pre> <p>Luego abre en el navegador la URL que aparece (por defecto <code>http://localhost:5173/</code>).</p> <p>Estructura del Proyecto</p> <p>Despu\u00e9s de crear el proyecto, ver\u00e1s una estructura como esta:</p> <p>\ud83d\udcc2 nombre-del-proyecto  \u251c\u2500\u2500 \ud83d\udcc2 node_modules      # Paquetes instalados  \u251c\u2500\u2500 \ud83d\udcc2 public            # Archivos est\u00e1ticos  \u251c\u2500\u2500 \ud83d\udcc2 src               # C\u00f3digo fuente         \u251c\u2500\u2500 App.tsx          # Componente principal         \u251c\u2500\u2500 main.tsx         # Punto de entrada         \u251c\u2500\u2500 index.css        # Estilos globales  \u251c\u2500\u2500 .gitignore           # Archivos ignorados por Git  \u251c\u2500\u2500 package.json         # Configuraci\u00f3n del proyecto  \u251c\u2500\u2500 vite.config.js       # Configuraci\u00f3n de Vite</p> <p>Agregar Estilos</p> <p>Puedes editar <code>src/index.css</code> o crear archivos CSS separados y usarlos en los componentes.</p> <p>Ejemplo en <code>App.jsx</code>:</p> <pre><code>import \"./App.css\";\n\nexport default function App() {\n  return &lt;h1 className=\"titulo\"&gt;\u00a1Hola, React con Vite!&lt;/h1&gt;;\n}\n</code></pre> <p>Y en <code>App.css</code>:</p> <pre><code>.titulo {\n  color: blue;\n  text-align: center;\n}\n</code></pre> <p>Agregar Bootstrap o Tailwind (Opcional)</p> <p>Si quieres usar estilos predefinidos:</p> <ul> <li>Bootstrap:</li> </ul> <pre><code>npm install bootstrap\n</code></pre> <p>Luego imp\u00f3rtalo en <code>main.jsx</code>:</p> <pre><code>import \"bootstrap/dist/css/bootstrap.min.css\";\n</code></pre> <ul> <li>Tailwind CSS: </li> </ul> <pre><code>npm install -D tailwindcss postcss autoprefixer\nnpx tailwindcss init -p\n</code></pre> <p>Configura <code>tailwind.config.js</code> y usa sus clases en los componentes.</p>"},{"location":"t_introduccion/","title":"Introducci\u00f3n a React y TypeScript","text":""},{"location":"t_introduccion/#que-es-react","title":"\u00bfQu\u00e9 es React?","text":"<p>React es una biblioteca de JavaScript utilizada para construir interfaces de usuario interactivas y eficientes. Fue creada por Facebook y es ampliamente usada en aplicaciones web modernas debido a su enfoque basado en componentes reutilizables.</p>"},{"location":"t_introduccion/#caracteristicas-clave-de-react","title":"Caracter\u00edsticas Clave de React","text":"<ul> <li>Basado en Componentes: La UI se divide en peque\u00f1as piezas reutilizables llamadas componentes.</li> <li>Virtual DOM: React actualiza solo las partes necesarias del DOM, mejorando el rendimiento.</li> <li>Unidireccionalidad de Datos: Control de flujo de datos predecible y estructurado.</li> <li>Declarativo: Define la UI basada en el estado de la aplicaci\u00f3n.</li> <li>Gran Comunidad y Ecosistema: React tiene una gran cantidad de librer\u00edas y herramientas que facilitan el desarrollo.</li> </ul> <pre><code>graph LR;\n  A[React + TypeScript] --&gt; B[Componentes con Tipos]\n  A --&gt; C[JSX + Tipos]\n  A --&gt; D[useState con Tipos]\n  A --&gt; E[Props Tipadas]\n  A --&gt; F[Ciclo de Vida con Tipos]\n  A --&gt; G[Virtual DOM]\n  A --&gt; H[React Router para Navegaci\u00f3n]\n  A --&gt; I[Integraci\u00f3n con APIs]\n  A --&gt; J[Herramientas de Depuraci\u00f3n]</code></pre>"},{"location":"t_introduccion/#react-con-typescript","title":"React con TypeScript","text":"<p>TypeScript es un superset de JavaScript que a\u00f1ade tipado est\u00e1tico, lo que ayuda a prevenir errores y mejorar la mantenibilidad del c\u00f3digo. Integrarlo con React permite definir tipos en componentes, props y estados.</p>"},{"location":"t_introduccion/#ventajas-de-usar-typescript-en-react","title":"Ventajas de usar TypeScript en React","text":"<ul> <li>Mejor Autocompletado y Documentaci\u00f3n en editores de c\u00f3digo como VSCode.</li> <li>Prevenci\u00f3n de Errores al definir tipos estrictos para props y estados.</li> <li>C\u00f3digo m\u00e1s Mantenible y f\u00e1cil de refactorizar.</li> <li>Mayor seguridad en la manipulaci\u00f3n de datos en los componentes.</li> </ul>"},{"location":"t_introduccion/#ejemplo-componente-con-props-tipadas","title":"Ejemplo: Componente con Props Tipadas","text":"<pre><code>import React from \"react\";\n\ninterface SaludoProps {\n  nombre: string;\n}\n\nconst Saludo: React.FC&lt;SaludoProps&gt; = ({ nombre }) =&gt; {\n  return &lt;h1&gt;Hola, {nombre}!&lt;/h1&gt;;\n};\n\nexport default Saludo;\n</code></pre> <p>Explicaci\u00f3n: - Se define una interfaz <code>SaludoProps</code> para tipar las <code>props</code>. - El componente <code>Saludo</code> recibe <code>nombre</code> y lo renderiza en pantalla.</p>"},{"location":"t_introduccion/#manejo-del-estado-en-react-usestate","title":"Manejo del Estado en React: <code>useState</code>","text":"<p>El hook <code>useState</code> permite manejar datos din\u00e1micos dentro de un componente.</p>"},{"location":"t_introduccion/#ejemplo-de-usestate-con-typescript","title":"Ejemplo de <code>useState</code> con TypeScript","text":"<pre><code>import React, { useState } from \"react\";\n\nconst Contador: React.FC = () =&gt; {\n  const [contador, setContador] = useState&lt;number&gt;(0);\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Contador: {contador}&lt;/h2&gt;\n      &lt;button onClick={() =&gt; setContador(contador + 1)}&gt;Incrementar&lt;/button&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default Contador;\n</code></pre> <p>Explicaci\u00f3n: - <code>useState&lt;number&gt;(0)</code>: Se inicializa el estado con el tipo <code>number</code>. - <code>setContador(contador + 1)</code>: Se actualiza el estado y React vuelve a renderizar el componente.</p>"},{"location":"t_introduccion/#ciclo-de-vida-con-useeffect","title":"Ciclo de Vida con <code>useEffect</code>","text":"<p>El hook <code>useEffect</code> permite ejecutar efectos secundarios en un componente.</p>"},{"location":"t_introduccion/#ejemplo-useeffect-para-cargar-datos-desde-una-api","title":"Ejemplo: <code>useEffect</code> para cargar datos desde una API","text":"<pre><code>import React, { useState, useEffect } from \"react\";\n\nconst DatosAPI: React.FC = () =&gt; {\n  const [datos, setDatos] = useState&lt;string&gt;(\"\");\n\n  useEffect(() =&gt; {\n    fetch(\"https://jsonplaceholder.typicode.com/todos/1\")\n      .then((res) =&gt; res.json())\n      .then((data) =&gt; setDatos(data.title));\n  }, []);\n\n  return &lt;h3&gt;Dato cargado: {datos}&lt;/h3&gt;;\n};\n\nexport default DatosAPI;\n</code></pre> <p>Explicaci\u00f3n: - <code>useEffect(() =&gt; { ... }, [])</code> ejecuta el c\u00f3digo una sola vez al montar el componente. - Se obtiene un dato de una API y se almacena en el estado <code>datos</code>.</p>"},{"location":"t_introduccion/#navegacion-con-react-router","title":"Navegaci\u00f3n con React Router","text":"<p>React Router es la librer\u00eda m\u00e1s utilizada para manejar la navegaci\u00f3n en aplicaciones React.</p>"},{"location":"t_introduccion/#ejemplo-configuracion-basica-de-react-router","title":"Ejemplo: Configuraci\u00f3n B\u00e1sica de React Router","text":"<pre><code>import React from \"react\";\nimport { BrowserRouter as Router, Routes, Route, Link } from \"react-router-dom\";\n\nconst Home: React.FC = () =&gt; &lt;h1&gt;P\u00e1gina de Inicio&lt;/h1&gt;;\nconst About: React.FC = () =&gt; &lt;h1&gt;Acerca de Nosotros&lt;/h1&gt;;\n\nconst App: React.FC = () =&gt; {\n  return (\n    &lt;Router&gt;\n      &lt;nav&gt;\n        &lt;Link to=\"/\"&gt;Inicio&lt;/Link&gt; | &lt;Link to=\"/about\"&gt;Acerca&lt;/Link&gt;\n      &lt;/nav&gt;\n      &lt;Routes&gt;\n        &lt;Route path=\"/\" element={&lt;Home /&gt;} /&gt;\n        &lt;Route path=\"/about\" element={&lt;About /&gt;} /&gt;\n      &lt;/Routes&gt;\n    &lt;/Router&gt;\n  );\n};\n\nexport default App;\n</code></pre> <p>Explicaci\u00f3n: - Se usa <code>BrowserRouter</code> para habilitar la navegaci\u00f3n en la aplicaci\u00f3n. - <code>Routes</code> y <code>Route</code> definen qu\u00e9 componente se renderiza en cada URL. - <code>Link</code> reemplaza las etiquetas <code>&lt;a&gt;</code> para evitar recargar la p\u00e1gina.</p>"},{"location":"t_introduccion/#herramientas-de-depuracion-en-react","title":"Herramientas de Depuraci\u00f3n en React","text":"<p>Para mejorar la productividad, React ofrece varias herramientas de depuraci\u00f3n: - React Developer Tools: Inspecciona componentes, props y estado en tiempo real. - Console.log y Debugger: Para analizar valores y ejecuci\u00f3n del c\u00f3digo. - ESLint y Prettier: Mejoran la calidad y consistencia del c\u00f3digo.</p>"},{"location":"t_introduccion/#ejemplo-uso-de-consolelog-y-debugger","title":"Ejemplo: Uso de <code>console.log</code> y <code>debugger</code>","text":"<pre><code>const handleClick = () =&gt; {\n  console.log(\"Bot\u00f3n presionado\");\n  debugger; // Detiene la ejecuci\u00f3n en DevTools\n};\n</code></pre>"},{"location":"t_introduccion/#eslint-en-react","title":"ESLint en React","text":"<p>ESLint es una herramienta que ayuda a mantener un c\u00f3digo limpio y sin errores en proyectos JavaScript y TypeScript.</p> <pre><code>graph TD;\n    A[ESLint] --&gt;|Detecta errores| B[Errores de Sintaxis]\n    A --&gt;|Mejora Calidad| C[Buenas Pr\u00e1cticas]\n    A --&gt;|Formateo Autom\u00e1tico| D[Prettier]</code></pre> <ul> <li>Errores de Sintaxis: Detecta problemas en el c\u00f3digo antes de ejecutarlo.</li> <li>Buenas Pr\u00e1cticas: Evita malas pr\u00e1cticas de programaci\u00f3n y c\u00f3digo obsoleto.</li> <li>Formateo Autom\u00e1tico: Se puede integrar con Prettier para un formato de c\u00f3digo consistente.</li> </ul>"},{"location":"t_introduccion/#configuracion-de-eslint","title":"Configuraci\u00f3n de ESLint","text":"<p>Despu\u00e9s de la inicializaci\u00f3n, puedes modificar <code>.eslintrc.js</code> para adaptarlo a tu proyecto:</p> <pre><code>module.exports = {\n    env: {\n        browser: true,\n        es2021: true\n    },\n    extends: [\n        \"eslint:recommended\",\n        \"plugin:react/recommended\",\n        \"plugin:@typescript-eslint/recommended\"\n    ],\n    parser: \"@typescript-eslint/parser\",\n    parserOptions: {\n        ecmaFeatures: {\n            jsx: true\n        },\n        ecmaVersion: \"latest\",\n        sourceType: \"module\"\n    },\n    plugins: [\"react\", \"@typescript-eslint\"],\n    rules: {\n        \"react/prop-types\": \"off\",\n        \"indent\": [\"error\", 4],\n        \"quotes\": [\"error\", \"double\"],\n        \"semi\": [\"error\", \"always\"]\n    }\n};\n</code></pre> <p>Para ejecutar ESLint en tu c\u00f3digo:</p> <pre><code>npx eslint src --fix\n</code></pre> <p>Esto revisar\u00e1 el c\u00f3digo y corregir\u00e1 errores autom\u00e1ticamente.</p>"},{"location":"t_introduccion/#conclusion","title":"Conclusi\u00f3n","text":"<pre><code>graph TD;\n    A[React] --&gt;|Interfaces Reutilizables| B[Componentes]\n    A --&gt;|Optimizaci\u00f3n de Renderizado| C[Virtual DOM]\n    A --&gt;|Seguridad de C\u00f3digo| D[TypeScript]\n    A --&gt;|Gesti\u00f3n de Estados| E[useState y useEffect]\n    A --&gt;|Navegaci\u00f3n| F[React Router]\n    A --&gt;|C\u00f3digo Limpio| G[ESLint]</code></pre> <ul> <li>Interfaces Reutilizables: Los componentes facilitan la modularidad y escalabilidad del c\u00f3digo.</li> <li>Optimizaci\u00f3n de Renderizado: React actualiza solo las partes necesarias de la UI mediante el Virtual DOM.</li> <li>Seguridad de C\u00f3digo: TypeScript previene errores y mejora la robustez del desarrollo.</li> <li>Gesti\u00f3n de Estados: Hooks como <code>useState</code> y <code>useEffect</code> permiten manejar cambios en la UI de manera eficiente.</li> <li>Navegaci\u00f3n: React Router facilita la creaci\u00f3n de aplicaciones con m\u00faltiples p\u00e1ginas sin recargas innecesarias.</li> <li>C\u00f3digo Limpio: ESLint ayuda a mantener un c\u00f3digo organizado y sin errores.</li> </ul>"}]}