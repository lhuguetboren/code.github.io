{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SINCRONE-ASINCRONE-FETCH-WEBSOCKET","text":""},{"location":"#1-introduccio","title":"1. Introducci\u00f3","text":"<ul> <li>Introducci\u00f3n</li> <li>\u00bfCallback?</li> </ul>"},{"location":"#2-xmlhttprequest","title":"2. xmlhttprequest","text":"<ul> <li>xmlhttprequest: Obsolet pero actiu a molts codis</li> </ul>"},{"location":"#3-fetch","title":"3. Fetch","text":"<ul> <li>fetch i promises</li> <li>exercicis</li> </ul>"},{"location":"#4-websocket","title":"4. WebSocket","text":"<ul> <li>WebSocket: comunicaci\u00f3 constant</li> </ul>"},{"location":"#5-react","title":"5. REACT","text":"<ul> <li>Fetch + WebSocket + REACT</li> </ul>"},{"location":"#requisitos-previos","title":"Requisitos Previos","text":"<p>Para seguir este curso, se recomienda tener conocimientos b\u00e1sicos de:</p> <ul> <li>HTML, CSS y JavaScript.</li> <li>Programaci\u00f3n en TypeScript.</li> <li>Uso de la terminal y manejo de npm.</li> <li>REACT</li> </ul>"},{"location":"ajax_fetch/","title":"3. AJAX amb Fetch","text":"<p>La funci\u00f3 <code>fetch()</code> \u00e9s una alternativa moderna a <code>XMLHttpRequest</code> per fer peticions HTTP. \u00c9s m\u00e9s neta i senzilla d\u2019utilitzar, basada en promeses (<code>Promise</code>) i compatible amb async/await.</p>"},{"location":"ajax_fetch/#comparativa-xmlhttprequest-vs-fetch","title":"\u2696\ufe0f Comparativa: XMLHttpRequest vs Fetch","text":"Caracter\u00edstica <code>XMLHttpRequest</code> <code>fetch()</code> API basada en Esdeveniments (<code>onreadystatechange</code>) Promeses (<code>.then()</code>, <code>.catch()</code>) Sintaxi Verbosa i complexa Clara i moderna Tractament d'errors S\u2019ha de gestionar amb estats i codis manualment Es pot gestionar amb <code>catch()</code> Suport per JSON Manual (<code>JSON.parse()</code>, <code>JSON.stringify()</code>) Integrat (<code>response.json()</code>) C\u00e0rrega de fitxers Mitjan\u00e7ant <code>FormData</code> + <code>send()</code> Mitjan\u00e7ant <code>FormData</code> + <code>body</code> Cancel\u00b7laci\u00f3 de peticions No suportada per defecte Amb <code>AbortController</code> Suport en navegadors antics Molt compatible Millor en navegadors moderns <p>Una promesa (Promise) representa una operaci\u00f3 as\u00edncrona que encara no ha finalitzat, per\u00f2 que ho far\u00e0 en el futur. Pot estar en un d\u2019aquests tres estats:</p> <ul> <li>Pending: en espera (pendent)</li> <li>Fulfilled: resolta amb \u00e8xit</li> <li>Rejected: rebutjada per un error</li> </ul>"},{"location":"ajax_fetch/#flux-de-vida-duna-promise","title":"\ud83d\udd04  Flux de vida d\u2019una Promise","text":"<pre><code>graph TD\n    A[\"Promise creada (pending)\"] --&gt;|Operaci\u00f3 completada| B[\"resolve() \u2192 fulfilled\"]\n    A --&gt;|Error o fallada| C[\"reject() \u2192 rejected\"]\n    B --&gt; D[\"then() \u2192 gestiona \u00e8xit\"]\n    C --&gt; E[\"catch() \u2192 gestiona error\"]</code></pre> <p>Les promeses permeten escriure codi m\u00e9s net i estructurat per gestionar operacions as\u00edncrones com peticions a servidors, temporitzadors, lectura de fitxers, etc.</p>"},{"location":"ajax_fetch/#exemple-de-peticio-get-amb-fetch","title":"\ud83d\ude80 Exemple de petici\u00f3 GET amb Fetch","text":"<pre><code>let configFetch = {\n  method: \"GET\",\n  headers: {\n    'Content-Type': 'application/x-www-form-urlencoded'\n  }\n};\n\nfetch(\"ejemplo.php?n1=2&amp;n2=3\", configFetch)\n  .then(response =&gt; response.json())\n  .then(objetoJSON =&gt; {\n    console.log(objetoJSON);\n  })\n  .catch(err =&gt; console.log(\"Error en la petici\u00f3\", err));\n</code></pre>"},{"location":"ajax_fetch/#exemple-de-peticio-post-amb-fetch","title":"\ud83d\udce4 Exemple de petici\u00f3 POST amb Fetch","text":"<pre><code>let configFetch = {\n  method: \"POST\",\n  body: \"n1=2&amp;n2=3\",\n  headers: {\n    'Content-Type': 'application/x-www-form-urlencoded'\n  }\n};\n\nfetch(\"ejemplo.php\", configFetch)\n  .then(response =&gt; response.json())\n  .then(objetoJSON =&gt; {\n    console.log(objetoJSON);\n  });\n</code></pre>"},{"location":"ajax_fetch/#funcions-utils-de-la-resposta","title":"\ud83e\uddf0 Funcions \u00fatils de la resposta","text":"<p>Aqu\u00ed tens la taula ampliada amb m\u00e9s funcions i propietats \u00fatils de la resposta (<code>Response</code>) en <code>fetch</code>:</p> Funci\u00f3 / Propietat Descripci\u00f3 <code>response.ok</code> Indica si la resposta t\u00e9 un codi d'estat entre 200 i 299 (\u00e8xit). <code>response.status</code> Retorna el codi d'estat HTTP (ex: 200, 404, 500...). <code>response.statusText</code> Missatge de l'estat HTTP (ex: \"OK\", \"Not Found\"). <code>response.url</code> Retorna la URL final de la resposta (pot ser diferent si hi ha redirecci\u00f3). <code>response.headers</code> Objecte amb totes les cap\u00e7aleres de la resposta (<code>Headers</code>). <code>response.json()</code> Converteix el cos de la resposta a un objecte JSON (promesa). <code>response.text()</code> Retorna el cos de la resposta com a text (promesa). <code>response.blob()</code> Retorna el cos com a <code>Blob</code>, \u00fatil per descarregar arxius. <code>response.formData()</code> Retorna el cos com a <code>FormData</code>, habitual en formularis. <code>response.arrayBuffer()</code> Retorna el cos com a dades bin\u00e0ries (<code>ArrayBuffer</code>). <code>response.redirected</code> Indica si la resposta \u00e9s resultat d'una redirecci\u00f3 autom\u00e0tica (<code>true/false</code>). <code>response.type</code> Tipus de resposta (<code>basic</code>, <code>cors</code>, <code>opaque</code>, etc.). <code>response.bodyUsed</code> Indica si el cos de la resposta ja s'ha llegit (<code>true/false</code>). <p>\ud83d\udccc Nota: Les funcions com <code>.json()</code>, <code>.text()</code> i <code>.blob()</code> retornen promeses, perqu\u00e8 l'acc\u00e9s al cos pot ser as\u00edncron.</p>"},{"location":"ajax_fetch/#enviament-de-fitxers-amb-fetch-i-formdata","title":"\ud83d\udce6 Enviament de fitxers amb Fetch i FormData","text":"<pre><code>&lt;input type=\"file\" id=\"arxiu\"&gt;\n&lt;input type=\"button\" onclick=\"enviarFitxer()\"&gt;\n</code></pre> <pre><code>function enviarFitxer() {\n  let control = document.getElementById(\"arxiu\");\n  let form = new FormData();\n  form.append(\"arxiu\", control.files[0]);\n  form.append(\"param1\", \"valor1\");\n  form.append(\"param2\", \"valor2\");\n\n  fetch(\"http://localhost:8089/endpoint\", {\n    method: \"POST\",\n    body: form\n  })\n  .then(resp =&gt; resp.json())\n  .then(respJSON =&gt; {\n    console.log(respJSON);\n  });\n}\n</code></pre>"},{"location":"ajax_fetch/#flux-de-peticio-amb-fetch","title":"\ud83d\udcca Flux de petici\u00f3 amb Fetch","text":"<pre><code>sequenceDiagram\n    participant JS\n    participant Server\n\n    JS-&gt;&gt;Server: fetch(url, config)\n    Server--&gt;&gt;JS: Retorna resposta (JSON/XML/Text)\n    JS-&gt;&gt;JS: then() \u2192 processar resposta</code></pre>"},{"location":"ajax_fetch/#tractament-derrors-amb-fetch","title":"\u2757\ufe0fTractament d\u2019errors amb Fetch","text":"<p><code>fetch()</code> no llen\u00e7a errors autom\u00e0ticament si el servidor retorna un codi com 404 o 500. Cal verificar-ho manualment:</p> <pre><code>fetch(\"endpoint.php\")\n  .then(response =&gt; {\n    if (!response.ok) {\n      throw new Error(\"Error HTTP: \" + response.status);\n    }\n    return response.json();\n  })\n  .then(data =&gt; console.log(data))\n  .catch(error =&gt; console.error(\"S'ha produ\u00eft un error:\", error));\n</code></pre> <p>Altres errors habituals: - \u274c Error de sintaxi a <code>fetch</code> (oblit de <code>{}</code> o cometes) - \u274c <code>body</code> mal format (ex. no usar <code>JSON.stringify()</code> per a JSON) - \u274c Cap\u00e7alera <code>Content-Type</code> no coincident amb el cos - \u274c Servidor sense suport per CORS (error de seguretat en cross-domain)</p>"},{"location":"ajax_fetch/#casos-dus-habituals-amb-fetch","title":"\ud83d\udca1 Casos d\u2019\u00fas habituals amb Fetch","text":"<ul> <li>\ud83c\udf10 Consultes d\u2019API REST: recuperaci\u00f3 de dades des de serveis externs.</li> <li>\u270f\ufe0f Formularis de contacte: enviament din\u00e0mic de dades sense reload.</li> <li>\ud83d\uddbc\ufe0f Carrega d\u2019imatges i fitxers: gesti\u00f3 de fitxers mitjan\u00e7ant FormData.</li> <li>\ud83d\udcca Aplicacions SPA: Fetch permet la c\u00e0rrega din\u00e0mica de contingut en aplicacions d\u2019una sola p\u00e0gina.</li> </ul>"},{"location":"ajax_fetch/#glossari-de-termes-clau-per-fetch","title":"\ud83d\udcd8 Glossari de termes clau per Fetch","text":"Terme Definici\u00f3 <code>fetch()</code> Funci\u00f3 moderna per fer peticions HTTP en JavaScript <code>Promise</code> Objecte que representa un resultat futur (\u00e8xit o error) <code>async/await</code> Sintaxi moderna per treballar amb promeses de forma m\u00e9s clara <code>headers</code> Objecte amb les cap\u00e7aleres HTTP a enviar amb la petici\u00f3 <code>body</code> Contingut que s\u2019envia en una petici\u00f3 POST/PUT <code>Content-Type</code> Tipus de dades que s\u2019envien (ex. JSON, form-urlencoded, multipart...) <code>response.ok</code> Boole\u00e0 que indica si la resposta \u00e9s exitosa (status 200\u2013299) <code>response.status</code> Codi HTTP retornat pel servidor (ex. 200, 404) <code>response.json()</code> Converteix la resposta a objecte JavaScript (si el contingut \u00e9s JSON) <code>response.text()</code> Llegeix la resposta com a text pla <code>FormData</code> Objecte per encapsular fitxers i camps de formulari per POST"},{"location":"ajax_fetch/#alternativa-axios","title":"\ud83e\uddea Alternativa: Axios","text":"<p>Axios \u00e9s una llibreria basada en promeses com <code>fetch</code>, per\u00f2 amb m\u00e9s funcionalitats per defecte:</p> <pre><code>npm install axios\n</code></pre> <pre><code>import axios from 'axios';\n\naxios.post(\"/endpoint\", {\n  nom: \"Maria\",\n  edat: 25\n})\n.then(response =&gt; {\n  console.log(response.data);\n})\n.catch(error =&gt; {\n  console.error(\"Error a la petici\u00f3\", error);\n});\n</code></pre>"},{"location":"ajax_fetch/#avantatges-de-axios","title":"Avantatges de Axios:","text":"<ul> <li>Suporta autom\u00e0ticament JSON</li> <li>Gestiona errors HTTP com excepcions</li> <li>Permet cancel\u00b7lar peticions</li> <li>Funciona tant al navegador com a Node.js</li> </ul>"},{"location":"ajax_xmlhttprequest/","title":"2. AJAX amb XMLHttpRequest","text":"<p>AJAX (Asynchronous JavaScript and XML) \u00e9s una t\u00e8cnica que permet fer peticions al servidor de manera as\u00edncrona, evitant recarregar tota la p\u00e0gina. Utilitza principalment l'objecte <code>XMLHttpRequest</code>, tot i que avui dia tamb\u00e9 s'utilitza molt <code>fetch()</code>.</p>"},{"location":"ajax_xmlhttprequest/#components-basics-de-xmlhttprequest","title":"\ud83e\uddf1 Components b\u00e0sics de XMLHttpRequest","text":""},{"location":"ajax_xmlhttprequest/#creacio-duna-peticio-get","title":"\ud83d\udd27 Creaci\u00f3 d'una petici\u00f3 GET","text":"<pre><code>let xmlHttp = new XMLHttpRequest();\nlet url = \"valida.php?nom=cristian&amp;edat=8\";\n\nxmlHttp.open(\"GET\", url, true); // true indica que \u00e9s as\u00edncrona\nxmlHttp.onreadystatechange = function () {\n  if (xmlHttp.readyState === 4 &amp;&amp; xmlHttp.status === 200) {\n    console.log(xmlHttp.responseText);\n    gestionaResposta(xmlHttp);\n  }\n};\nxmlHttp.send(null);\n</code></pre>"},{"location":"ajax_xmlhttprequest/#estats-de-readystate","title":"\ud83d\udd01 Estats de readyState","text":"Estat Descripci\u00f3 0 No iniciada 1 Connexi\u00f3 oberta 2 Headers rebuts 3 Rebent dades 4 Petici\u00f3 completada"},{"location":"ajax_xmlhttprequest/#peticio-post-amb-xmlhttprequest","title":"\ud83d\udce4 Petici\u00f3 POST amb XMLHttpRequest","text":"<pre><code>let xmlHttp = new XMLHttpRequest();\nlet url = \"valida.php\";\n\nxmlHttp.open(\"POST\", url, true);\nxmlHttp.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\nxmlHttp.onreadystatechange = function () {\n  if (xmlHttp.readyState === 4 &amp;&amp; xmlHttp.status === 200) {\n    console.log(xmlHttp.responseText);\n    gestionaResposta(xmlHttp);\n  }\n};\nxmlHttp.send(\"nom=cristian&amp;edat=88\");\n</code></pre>"},{"location":"ajax_xmlhttprequest/#exemple-de-resposta-en-xml-des-de-php","title":"\ud83d\udce5 Exemple de resposta en XML des de PHP","text":"<pre><code>&lt;?php\n$name = $_GET['nom'];\nheader(\"Content-type: text/xml\");\necho '&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;';\necho \"&lt;nom&gt;&lt;![CDATA[$name]]&gt;&lt;/nom&gt;\";\n?&gt;\n</code></pre>"},{"location":"ajax_xmlhttprequest/#tractament-de-la-resposta-xml","title":"\ud83d\udd0d Tractament de la resposta XML","text":"<pre><code>function repResposta(xmlHttp) {\n  let resp = xmlHttp.responseXML;\n  let listResp = resp.getElementsByTagName(\"nom\");\n  for (let k = 0; k &lt; listResp.length; k++) {\n    let result = listResp[k].childNodes[0].nodeValue;\n    alert(result);\n  }\n}\n</code></pre>"},{"location":"ajax_xmlhttprequest/#exemple-de-resposta-json-des-de-php","title":"\ud83e\uddea Exemple de resposta JSON des de PHP","text":"<pre><code>&lt;?php\n$name = $_GET['nom'];\n$resposta = '{\"nom\":\"' . $name . '\", \"noms\":[\"Cristian\",\"Pedro\"], \"info\":{\"noms\":[\"nom1\",\"nom2\"]}}';\necho $resposta;\n?&gt;\n</code></pre>"},{"location":"ajax_xmlhttprequest/#tractament-de-la-resposta-json","title":"\ud83d\udd0e Tractament de la resposta JSON","text":"<pre><code>function repRespostaJSON(xmlHttp) {\n  if (xmlHttp.status === 200) {\n    let resp = xmlHttp.responseText;\n    let respJSON = JSON.parse(resp);\n    let txt = respJSON.nom;\n    let nom1 = respJSON.noms[0];\n    let nom2 = respJSON.noms[1];\n    console.log(txt, nom1, nom2);\n  }\n}\n</code></pre>"},{"location":"ajax_xmlhttprequest/#enviament-de-fitxers-amb-formdata","title":"\ud83d\udce6 Enviament de fitxers amb FormData","text":"<pre><code>&lt;input type=\"file\" id=\"arxius\"&gt;\n&lt;input type=\"button\" onclick=\"sendFile();\"&gt;\n</code></pre> <pre><code>function sendFile() {\n  let control = document.getElementById(\"arxius\");\n  let arxiu = control.files[0];\n  let form = new FormData();\n  form.append(\"arxiu\", arxiu);\n\n  let xmlHttp = new XMLHttpRequest();\n  xmlHttp.open(\"POST\", \"ajax.php\", true);\n  xmlHttp.send(form);\n}\n</code></pre>"},{"location":"ajax_xmlhttprequest/#diagrama-mermaid-flux-duna-peticio-ajax-amb-xmlhttprequest","title":"\ud83d\udcca Diagrama Mermaid: Flux d\u2019una petici\u00f3 AJAX amb XMLHttpRequest","text":"<pre><code>sequenceDiagram\n    participant JS\n    participant Server\n\n    JS-&gt;&gt;Server: open() + send()\n    Server--&gt;&gt;JS: Retorna resposta (XML/JSON)\n    JS-&gt;&gt;JS: onreadystatechange \u2192 callback\n    JS-&gt;&gt;JS: Gestiona i mostra dades</code></pre>"},{"location":"ajax_xmlhttprequest/#casos-dus-reals-amb-xmlhttprequest","title":"\ud83e\udde9 Casos d\u2019\u00fas reals amb XMLHttpRequest","text":""},{"location":"ajax_xmlhttprequest/#formularis-de-registre","title":"\ud83d\udcc4 Formularis de registre","text":"<p>Validaci\u00f3 d'usuari disponible en temps real sense recarregar la p\u00e0gina.</p>"},{"location":"ajax_xmlhttprequest/#gestio-darxius","title":"\ud83d\uddc2\ufe0f Gesti\u00f3 d'arxius","text":"<p>Enviament de documents, imatges o fitxers via formulari amb <code>FormData</code>.</p>"},{"location":"ajax_xmlhttprequest/#aplicacions-interactives","title":"\ud83c\udfae Aplicacions interactives","text":"<p>Jocs en l\u00ednia que intercanvien dades amb el servidor de manera cont\u00ednua (p. ex. puntuaci\u00f3 en temps real).</p>"},{"location":"ajax_xmlhttprequest/#dashboard-i-analitica","title":"\ud83d\udcc8 Dashboard i anal\u00edtica","text":"<p>Actualitzaci\u00f3 de gr\u00e0fiques o dades estad\u00edstiques sense recarregar la p\u00e0gina sencerament.</p>"},{"location":"ajax_xmlhttprequest/#resum-de-conceptes-clau","title":"\ud83d\udd04 Resum de conceptes clau","text":"Concepte Explicaci\u00f3 <code>readyState</code> Estat de la petici\u00f3 (de 0 a 4) <code>status</code> Codi HTTP de resposta del servidor (ex. 200 = OK, 404 = Not Found) <code>responseText</code> Contingut de la resposta del servidor en format text (ex: <code>\"hola ALF\"</code>). <code>responseXML</code> Contingut de la resposta en format XML (si el servidor respon amb XML). <code>JSON.parse(...)</code> Converteix una resposta en format JSON (text) a un objecte JavaScript. <code>setRequestHeader</code> Afegeix cap\u00e7aleres HTTP a la petici\u00f3, \u00fatil en m\u00e8todes com POST o PUT. <code>open(metode, url, async)</code> Defineix el m\u00e8tode (GET/POST), la URL i si \u00e9s una petici\u00f3 as\u00edncrona. <code>send(dades)</code> Envia la petici\u00f3 al servidor; pot portar dades en cas de POST. <code>onreadystatechange</code> Funci\u00f3 que s'executa cada vegada que canvia l'estat de <code>readyState</code>. <code>xmlHttp</code> Objecte creat amb <code>new XMLHttpRequest()</code> per fer la petici\u00f3. <code>console.log(...)</code> Serveix per mostrar informaci\u00f3 a la consola (molt \u00fatil per depurar). <code>true</code> a <code>open(...)</code> Indica que la petici\u00f3 \u00e9s as\u00edncrona (no bloqueja l'execuci\u00f3 del codi). <code>false</code> a <code>open(...)</code> Indica petici\u00f3 s\u00edncrona (desaconsellada perqu\u00e8 bloqueja el navegador). <code>Content-Type</code> Cap\u00e7alera que indica el tipus de contingut enviat (ex: <code>application/json</code>). <code>XMLHttpRequest</code> Objecte integrat de JavaScript per fer peticions HTTP al servidor. <code>FormData</code> Objecte per construir dades a enviar via POST, inclosos fitxers"},{"location":"ajax_xmlhttprequest/#errors-habituals-amb-xmlhttprequest","title":"\u2757\ufe0fErrors habituals amb XMLHttpRequest","text":""},{"location":"ajax_xmlhttprequest/#no-establir-el-metode-correctament","title":"\u274c No establir el m\u00e8tode correctament","text":"<p><pre><code>xmlHttp.open(\"GET\", url); // Falta el tercer par\u00e0metre (true/false)\n</code></pre> \u27a1 Soluci\u00f3: Afegeix <code>true</code> per fer-la as\u00edncrona: <code>xmlHttp.open(\"GET\", url, true);</code></p>"},{"location":"ajax_xmlhttprequest/#no-afegir-capcalera-en-peticions-post","title":"\u274c No afegir cap\u00e7alera en peticions POST","text":"<p><pre><code>// Sense setRequestHeader() en POST\nxmlHttp.open(\"POST\", url, true);\nxmlHttp.send(\"param1=valor\");\n</code></pre> \u27a1 Soluci\u00f3: <code>xmlHttp.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");</code></p>"},{"location":"ajax_xmlhttprequest/#gestionar-malament-lestat-readystate","title":"\u274c Gestionar malament l'estat readyState","text":"<p><pre><code>if (xmlHttp.readyState === 200) { ... } // ERROR\n</code></pre> \u27a1 Soluci\u00f3: Comprova primer que <code>readyState === 4</code> i despr\u00e9s <code>status === 200</code></p>"},{"location":"ajax_xmlhttprequest/#errors-de-cors","title":"\u274c Errors de CORS","text":"<p>Si el servidor no permet peticions des d\u2019un domini diferent, pot fallar la petici\u00f3. \u27a1 Soluci\u00f3: El servidor ha d\u2019afegir l'encap\u00e7alament <code>Access-Control-Allow-Origin: *</code></p>"},{"location":"ajax_xmlhttprequest/#no-controlar-errors-de-xarxa","title":"\u274c No controlar errors de xarxa","text":"<p><pre><code>xmlHttp.onreadystatechange = function () {\n  if (xmlHttp.readyState === 4) {\n    // No comprova si xmlHttp.status !== 200\n  }\n};\n</code></pre> \u27a1 Soluci\u00f3: Comprova sempre <code>xmlHttp.status</code> i gestiona casos com 404 o 500</p> <p>Vols afegir m\u00e9s exemples pr\u00e0ctics o ja passem a <code>fetch()</code>?</p>"},{"location":"callback/","title":"Funci\u00f3 callback","text":"<p>Una funci\u00f3 callback en JavaScript \u00e9s una funci\u00f3 que es passa com a par\u00e0metre a una altra funci\u00f3, i que s'executa despr\u00e9s que aquesta hagi acabat alguna operaci\u00f3. S'utilitza molt en operacions as\u00edncrones o quan vols fer una acci\u00f3 espec\u00edfica despr\u00e9s d\u2019una altra.</p>"},{"location":"callback/#definicio","title":"\ud83d\udccc Definici\u00f3:","text":"<p>Una callback \u00e9s una funci\u00f3 passada com a argument a una altra funci\u00f3, que ser\u00e0 cridada (callback) dins d'aquesta \u00faltima per completar alguna rutina o acci\u00f3.</p>"},{"location":"callback/#exemple-senzill","title":"\u2705 Exemple senzill:","text":"<pre><code> function esperarISaludar(funcioAferDespres) {\n  setTimeout(function () {\n    console.log(\"Han passat 2 segons.\");\n    funcioAferDespres(); // aqu\u00ed cridem la funci\u00f3 que vam rebre com a par\u00e0metre\n  }, 2000);\n}\n\nfunction mostrarSalutacio() {\n  console.log(\"Hola des de la funci\u00f3 callback!\");\n}\n\nesperarISaludar(mostrarSalutacio); // aqu\u00ed passem 'mostrarSalutacio', que far\u00e0 el paper de callback\n</code></pre>"},{"location":"introduccio/","title":"1. Introducci\u00f3 a l'asincronia amb JavaScript","text":""},{"location":"introduccio/#comunicacio-sincrona-vs-asincrona","title":"\ud83d\udcc9 Comunicaci\u00f3 s\u00edncrona vs as\u00edncrona","text":"<p>En una aplicaci\u00f3 web, el navegador pot comunicar-se amb el servidor de dues formes:</p> <ul> <li>S\u00edncrona: la petici\u00f3 bloqueja l'execuci\u00f3 fins rebre la resposta.</li> <li>As\u00edncrona: la petici\u00f3 s'envia i el codi segueix executant-se mentre arriba la resposta.</li> </ul>"},{"location":"introduccio/#comparativa-sincrona-vs-asincrona","title":"Comparativa s\u00edncrona vs as\u00edncrona","text":"<pre><code>graph TD\n    A[Usuari envia acci\u00f3] --&gt; B[S\u00edncrona: navegador espera resposta]\n    A --&gt; C[As\u00edncrona: navegador &lt;br&gt; continua codi]\n    B --&gt; D[Resposta rebuda &lt;br&gt;\u2192 mostra]\n    C --&gt; E[Resposta rebuda en &lt;br&gt;segon pla]\n    E --&gt; F[Callback gestiona &lt;br&gt;resposta \u2192 mostra]</code></pre>"},{"location":"introduccio/#exemple-de-peticio-sincrona-formulari-classic-html","title":"\u2728 Exemple de petici\u00f3 s\u00edncrona (formulari cl\u00e0ssic HTML)","text":"<pre><code>&lt;!-- form.html --&gt;\n&lt;form action=\"envia.php\" method=\"get\"&gt;\n  &lt;input type=\"text\" name=\"nom\" value=\"ALF\"&gt;\n  &lt;input type=\"submit\" value=\"SUBMIT\"&gt;\n&lt;/form&gt;\n</code></pre> <pre><code>// envia.php\n&lt;?php\n$name = $_GET['nom'];\necho \"&lt;body&gt;hola $name&lt;/body&gt;\";\n?&gt;\n</code></pre> <ul> <li>El navegador espera la resposta abans de continuar.</li> </ul>"},{"location":"introduccio/#exemple-de-peticio-asincrona-amb-javascript-ajax","title":"\u23f3 Exemple de petici\u00f3 as\u00edncrona amb JavaScript (AJAX)","text":"<pre><code>let xmlHttp = new XMLHttpRequest();\nxmlHttp.open(\"GET\", \"envia.php?nom=ALF\", true); // true \u2192 as\u00edncrona\nxmlHttp.onreadystatechange = function () {\n  if (xmlHttp.readyState === 4 &amp;&amp; xmlHttp.status === 200) {\n    console.log(xmlHttp.responseText); // hola ALF\n  }\n};\nxmlHttp.send(null);\n</code></pre> <ul> <li>El navegador no queda bloquejat mentre espera la resposta.</li> <li>Quan la resposta arriba, s'executa la funci\u00f3 callback.</li> </ul>"},{"location":"introduccio/#flux-de-comunicacio-asincrona","title":"\ud83d\udcca Flux de comunicaci\u00f3 as\u00edncrona","text":"<pre><code>sequenceDiagram\n    participant Client as Navegador (Client)\n    participant Server as Servidor (envia.php)\n\n    Client-&gt;&gt;Client: Crea XMLHttpRequest\n    Client-&gt;&gt;Client: xmlHttp.open(\"GET\", \"envia.php?nom=ALF\", true)\n    Client-&gt;&gt;Client: xmlHttp.onreadystatechange = funci\u00f3(...)\n    Client-&gt;&gt;Server: xmlHttp.send(null)\n\n    Note over Server: El servidor rep la petici\u00f3\n\n    Server--&gt;&gt;Client: Resposta HTTP (status 200, responseText)\n\n    Client-&gt;&gt;Client: onreadystatechange s'activa diverses vegades\n    Client-&gt;&gt;Client: if (readyState == 4 &amp;&amp; status == 200)\n    Client-&gt;&gt;Client: Processar xmlHttp.responseText\n    Client-&gt;&gt;Console: console.log(\"hola ALF\")\n</code></pre>"},{"location":"introduccio/#flux-de-comunicacio-sincrona","title":"\ud83d\udcca Flux de comunicaci\u00f3 s\u00edncrona","text":""},{"location":"introduccio/#sequencediagram-participant-js-participant-server-js-server-open-send-server-js-retorna-resposta-xmljson-js-js-onreadystatechange-callback-js-js-gestiona-i-mostra-dades","title":"<pre><code>sequenceDiagram\n    participant JS\n    participant Server\n\n    JS-&gt;&gt;Server: open() + send()\n    Server--&gt;&gt;JS: Retorna resposta (XML/JSON)\n    JS-&gt;&gt;JS: onreadystatechange \u2192 callback\n    JS-&gt;&gt;JS: Gestiona i mostra dades</code></pre>","text":""},{"location":"introduccio/#casos-dus-reals-de-lasincronia-amb-javascript","title":"\ud83e\udde9 Casos d\u2019\u00fas reals de l\u2019asincronia amb JavaScript","text":""},{"location":"introduccio/#comerc-electronic","title":"\ud83d\uded2 Comer\u00e7 electr\u00f2nic","text":"<p>Quan un usuari afegeix un producte al carret sense que la p\u00e0gina es recarregui, s\u2019utilitza una petici\u00f3 as\u00edncrona per actualitzar el servidor i la interf\u00edcie de manera din\u00e0mica.</p>"},{"location":"introduccio/#aplicacions-de-xat","title":"\ud83d\udcf1 Aplicacions de xat","text":"<p>Les aplicacions de missatgeria instant\u00e0nia (com WhatsApp Web o Messenger) utilitzen comunicaci\u00f3 as\u00edncrona per enviar i rebre missatges en temps real sense haver de recarregar la p\u00e0gina.</p>"},{"location":"introduccio/#cercadors-amb-autocompletar","title":"\ud83d\udd0d Cercadors amb autocompletar","text":"<p>Els motors de cerca com Google mostren suggeriments a mesura que escrius gr\u00e0cies a consultes as\u00edncrones que es fan al servidor per obtenir resultats suggerits.</p>"},{"location":"introduccio/#noticies-i-actualitzacions-en-viu","title":"\ud83d\udcf0 Not\u00edcies i actualitzacions en viu","text":"<p>Els portals de not\u00edcies poden utilitzar peticions as\u00edncrones per refrescar els titulars autom\u00e0ticament cada cert temps sense que l\u2019usuari ho noti.</p>"},{"location":"introduccio/#validacio-de-formularis-en-temps-real","title":"\ud83c\udf10 Validaci\u00f3 de formularis en temps real","text":"<p>Quan introdueixes un nom d\u2019usuari i autom\u00e0ticament t\u2019indica si est\u00e0 disponible o no, s\u2019est\u00e0 fent una consulta AJAX al servidor mentre tu segueixes omplint el formulari.</p>"},{"location":"react-ajax-websocket/","title":"Aplicaci\u00f3 REACT","text":"<ol> <li>\u2705 WebSockets per comunicaci\u00f3 en temps real  </li> <li>\ud83d\udd04 Comunicaci\u00f3 s\u00edncrona (HTTP) per peticions cl\u00e0ssiques amb <code>fetch</code> o <code>axios</code> </li> <li>\ud83d\udcc1 Pujada de fitxers mitjan\u00e7ant formulari amb <code>multipart/form-data</code></li> </ol>"},{"location":"react-ajax-websocket/#esquema-del-projecte-react","title":"\ud83d\udce6 Esquema del projecte React","text":"<pre><code>react-app/\n\u2502\n\u251c\u2500\u2500 public/\n\u2502   \u2514\u2500\u2500 index.html\n\u2502\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 components/\n\u2502   \u2502   \u251c\u2500\u2500 WebSocketChat.jsx        # Component de xat en temps real amb WebSocket\n\u2502   \u2502   \u251c\u2500\u2500 SyncRequest.jsx          # Component per fer peticions s\u00edncrones amb fetch\n\u2502   \u2502   \u251c\u2500\u2500 FileUpload.jsx           # Formulari per pujar fitxers\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 services/\n\u2502   \u2502   \u251c\u2500\u2500 websocketClient.js       # Gestor de connexi\u00f3 WebSocket\n\u2502   \u2502   \u251c\u2500\u2500 api.js                   # Funcions de peticions HTTP (fetch o axios)\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 App.jsx                      # Arrel de la UI\n\u2502   \u2514\u2500\u2500 main.jsx                     # Entrada del projecte (ReactDOM)\n\u2502\n\u251c\u2500\u2500 server/\n\u2502   \u251c\u2500\u2500 server.js                    # Backend amb Node.js (WebSocket + API + Upload)\n\u2502   \u2514\u2500\u2500 uploads/                     # Carpeta per guardar els fitxers pujats\n\u2502\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 package.json\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"react-ajax-websocket/#tecnologies-previstes","title":"\ud83d\udd0c Tecnologies previstes","text":"<ul> <li>Frontend (React):</li> <li><code>React</code> (amb <code>Vite</code> o <code>Create React App</code>)</li> <li><code>WebSocket</code> natiu per a temps real</li> <li><code>fetch</code> o <code>axios</code> per comunicaci\u00f3 s\u00edncrona</li> <li> <p><code>FormData</code> per pujada de fitxers</p> </li> <li> <p>Backend (Node.js):</p> </li> <li><code>Express</code> per peticions s\u00edncrones i pujada de fitxers</li> <li><code>websocket</code> o <code>ws</code> per connexions WebSocket</li> <li><code>multer</code> per gestionar <code>multipart/form-data</code></li> </ul>"},{"location":"react-ajax-websocket/#flux-de-treball-per-cada-funcionalitat","title":"\ud83e\udde0 Flux de treball per cada funcionalitat:","text":""},{"location":"react-ajax-websocket/#1-websocket","title":"1. WebSocket","text":"<ul> <li>El client connecta a <code>ws://localhost:8089</code></li> <li>S\u2019envien i reben missatges entre usuaris en temps real</li> </ul>"},{"location":"react-ajax-websocket/#2-comunicacio-sincrona-http","title":"2. Comunicaci\u00f3 s\u00edncrona (HTTP)","text":"<ul> <li><code>GET</code> i <code>POST</code> a <code>/api/*</code></li> <li>Es fan peticions amb <code>fetch</code> i es mostra el resultat</li> </ul>"},{"location":"react-ajax-websocket/#3-pujada-de-fitxers","title":"3. Pujada de fitxers","text":"<ul> <li>Formulari que permet seleccionar i pujar un fitxer</li> <li>El servidor el desa a <code>/uploads</code> i respon amb info</li> </ul> <p>Descarregar codi inicial</p>"},{"location":"webSocket/","title":"\ud83c\udf10 Introducci\u00f3 a WebSocket amb Node.js i JavaScript","text":"<p>WebSocket \u00e9s un protocol que permet comunicaci\u00f3 bidireccional en temps real entre el client (navegador) i el servidor. A difer\u00e8ncia de HTTP, WebSocket mant\u00e9 una connexi\u00f3 oberta, ideal per aplicacions com xats, jocs o notificacions.</p> <pre><code>sequenceDiagram\n    participant Navegador1\n    participant Navegador2\n    participant ServidorWS as Servidor WebSocket\n\n    Note over Navegador1,ServidorWS: Connexi\u00f3 inicial\n    Navegador1-&gt;&gt;ServidorWS: WebSocket.connect(\"ws://localhost:8089\")\n    ServidorWS--&gt;&gt;Navegador1: Connexi\u00f3 acceptada\n\n    Note over Navegador2,ServidorWS: Segona connexi\u00f3\n    Navegador2-&gt;&gt;ServidorWS: WebSocket.connect(\"ws://localhost:8089\")\n    ServidorWS--&gt;&gt;Navegador2: Connexi\u00f3 acceptada\n\n    Note over Navegador1: Envia un missatge\n    Navegador1-&gt;&gt;ServidorWS: socket.send(\"Hola servidor!\")\n    ServidorWS--&gt;&gt;Navegador2: Missatge d'un altre client: Hola servidor!\n\n    Note over Navegador1,ServidorWS: Tancament de connexi\u00f3\n    Navegador1--&gt;&gt;ServidorWS: Connexi\u00f3 tancada\n    ServidorWS--&gt;&gt;ServidorWS: Elimina la connexi\u00f3 del llistat</code></pre>"},{"location":"webSocket/#installacio-completa-de-nodejs-i-websocket","title":"\u2699\ufe0f Instal\u00b7laci\u00f3 completa de Node.js i WebSocket","text":""},{"location":"webSocket/#pagina-oficial","title":"\ud83d\udd17 P\u00e0gina oficial:","text":"<p>\u27a1\ufe0f https://nodejs.org</p> <p>Descarrega i instal\u00b7la la versi\u00f3 recomanada (LTS) segons el teu sistema operatiu.</p>"},{"location":"webSocket/#2-verifica-la-installacio","title":"2\ufe0f\u20e3 Verifica la instal\u00b7laci\u00f3","text":"<p>Obre una terminal o consola i escriu:</p> <pre><code>node -v      # Mostra la versi\u00f3 de Node.js\nnpm -v       # Mostra la versi\u00f3 de npm (Node Package Manager)\n</code></pre>"},{"location":"webSocket/#3-crea-un-projecte-nou","title":"3\ufe0f\u20e3 Crea un projecte nou","text":"<pre><code>mkdir servidor-websocket\ncd servidor-websocket\nnpm init -y\n</code></pre>"},{"location":"webSocket/#4-installa-el-paquet-websocket","title":"4\ufe0f\u20e3 Instal\u00b7la el paquet <code>websocket</code>","text":"<pre><code>npm install websocket\n</code></pre> <p>\ud83d\udce6 Aix\u00f2 afegir\u00e0 el m\u00f2dul a <code>node_modules/</code> i al fitxer <code>package.json</code>.</p>"},{"location":"webSocket/#5-crea-el-servidor-websocket","title":"5\ufe0f\u20e3 Crea el servidor WebSocket","text":"<p>Crea un fitxer <code>server.js</code> amb aquest contingut:</p> <pre><code>const http = require('http');\nconst WebSocketServer = require('websocket').server;\n\nconst server = http.createServer((req, res) =&gt; {\n  res.end(\"Servidor WebSocket actiu\");\n});\n\nconst wsServer = new WebSocketServer({\n  httpServer: server,\n  autoAcceptConnections: false\n});\n\nconst connexions = [];\n\nwsServer.on('request', (request) =&gt; {\n  const connection = request.accept(null, request.origin);\n  connexions.push(connection);\n  console.log(\"Client connectat\");\n\n  connection.on('message', (message) =&gt; {\n    console.log(\"Missatge rebut:\", message.utf8Data);\n    connexions.forEach((connexioClient) =&gt; {\n      if (connexioClient !== connection) {\n        connexioClient.sendUTF(\"Missatge d'un altre client: \" + message.utf8Data);\n      }\n    });\n  });\n\n  connection.on('close', () =&gt; {\n    console.log(\"Connexi\u00f3 tancada\");\n    const index = connexions.indexOf(connection);\n    if (index !== -1) connexions.splice(index, 1);\n  });\n});\n\nserver.listen(8089, () =&gt; {\n  console.log(\"Servidor WebSocket escoltant al port 8089\");\n});\n</code></pre>"},{"location":"webSocket/#6-executa-el-servidor","title":"6\ufe0f\u20e3 Executa el servidor","text":"<pre><code>node server.js\n</code></pre> <p>\ud83d\udc49 Ara pots connectar-t\u2019hi amb un client WebSocket des del navegador.</p>"},{"location":"webSocket/#servidor-websocket-amb-nodejs","title":"\ud83d\udee0\ufe0f Servidor WebSocket amb Node.js","text":"<pre><code>const http = require('http');\nconst WebSocketServer = require('websocket').server;\n\nconst server = http.createServer((req, res) =&gt; {\n  res.end(\"Servidor WebSocket actiu\");\n});\n\nconst wsServer = new WebSocketServer({\n  httpServer: server,\n  autoAcceptConnections: false\n});\n\nconst connexions = [];\n\nwsServer.on('request', (request) =&gt; {\n  const connection = request.accept(null, request.origin);\n  connexions.push(connection);\n  console.log(\"Client connectat\");\n\n  connection.on('message', (message) =&gt; {\n    console.log(\"Missatge rebut:\", message.utf8Data);\n    connexions.forEach((connexioClient) =&gt; {\n      if (connexioClient !== connection) {\n        connexioClient.sendUTF(\"Missatge d'un altre client: \" + message.utf8Data);\n      }\n    });\n  });\n\n  connection.on('close', () =&gt; {\n    console.log(\"Connexi\u00f3 tancada\");\n    const index = connexions.indexOf(connection);\n    if (index !== -1) connexions.splice(index, 1);\n  });\n});\n\nserver.listen(8089);\n</code></pre>"},{"location":"webSocket/#caracteristiques","title":"\u2705 Caracter\u00edstiques:","text":"<ul> <li>Accepta m\u00faltiples connexions.</li> <li>Reenvia missatges entre clients.</li> <li>Gestiona desconnexions.</li> </ul>"},{"location":"webSocket/#client-websocket-en-javascript-navegador","title":"\ud83d\udcbb Client WebSocket en JavaScript (navegador)","text":"<pre><code>&lt;script&gt;\n  const socket = new WebSocket(\"ws://localhost:8089\");\n\n  socket.onopen = function () {\n    console.log(\"Connectat al servidor WebSocket\");\n    socket.send(\"Hola servidor!\");\n  };\n\n  socket.onmessage = function (event) {\n    console.log(\"Missatge rebut del servidor:\", event.data);\n  };\n\n  socket.onclose = function () {\n    console.log(\"Connexi\u00f3 tancada\");\n  };\n\n  socket.onerror = function (error) {\n    console.error(\"Error WebSocket:\", error);\n  };\n&lt;/script&gt;\n</code></pre>"},{"location":"webSocket/#comportament","title":"\u2705 Comportament:","text":"<ul> <li>Es connecta al servidor WebSocket.</li> <li>Envia i rep missatges en temps real.</li> <li>Mostra la comunicaci\u00f3 per consola.</li> </ul>"},{"location":"webSocket/#resum","title":"\ud83e\udde0 Resum","text":"<ul> <li>WebSocket permet comunicaci\u00f3 en temps real sense tornar a fer peticions cont\u00ednues.</li> <li>Ideal per xats, jocs multiplayer o aplicacions en viu.</li> <li>Funciona amb un servidor WebSocket (Node.js) i un client (JavaScript).</li> </ul>"},{"location":"webSocket/#exemple-dus","title":"\ud83d\udd04 Exemple d'\u00fas","text":"<p>Aqu\u00ed tens una taula comparativa dels usos reals de WebSockets, amb una visi\u00f3 clara de per qu\u00e8 s\u2019utilitzen, qu\u00e8 aporten i exemples concrets:</p>"},{"location":"webSocket/#taula-comparativa-dusos-reals-de-websockets","title":"\ud83d\udcca Taula comparativa d\u2019usos reals de WebSockets","text":"\u00das Per qu\u00e8 s\u2019utilitzen WebSockets Qu\u00e8 aporten Exemples concrets Xat en temps real Comunicaci\u00f3 bidireccional immediata Enviament i recepci\u00f3 de missatges al moment WhatsApp Web, Slack, Discord Jocs multiplayer online Sincronitzaci\u00f3 cont\u00ednua entre jugadors Partides fluides sense retards visibles Agar.io, Chess.com, Krunker Monitoratge de dades Actualitzaci\u00f3 constant de valors en viu Visualitzaci\u00f3 instant\u00e0nia de dades Grafana, panells IoT, Google Analytics Borsa / criptomonedes Canvis de preu constants Refresc del valor en temps real Binance, TradingView, Robinhood Notificacions en viu Informaci\u00f3 d\u2019esdeveniments sense refrescar Interacci\u00f3 cont\u00ednua amb l\u2019usuari YouTube, Facebook, GitHub Edici\u00f3 col\u00b7laborativa Canvis simultanis per diversos usuaris Sincronitzaci\u00f3 d\u2019accions i continguts Google Docs, Figma, Miro Control remot / IoT Interacci\u00f3 directa amb dispositius o sistemes f\u00edsics Comandes i resposta instant\u00e0nies Sistemes dom\u00f2tics, robots, sensors"},{"location":"tour/ruta/","title":"\ud83e\udde0 CodeTutor: Comunicaci\u00f3 As\u00edncrona amb JavaScript","text":""},{"location":"tour/ruta/#modul-1-que-es-lasincronia","title":"\ud83d\udd39 M\u00f2dul 1: Qu\u00e8 \u00e9s l\u2019asincronia?","text":"<p>Definici\u00f3 b\u00e0sica:</p> <p>Quan fem una petici\u00f3 as\u00edncrona, el navegador no es bloqueja esperant la resposta, sin\u00f3 que continua executant el codi. Quan la resposta arriba, es gestiona amb una callback o una promesa.</p> <p>\ud83d\udcd8 Exemples cl\u00e0ssics d\u2019\u00fas:</p> <ul> <li>Validar formularis sense recarregar la p\u00e0gina.</li> <li>Mostrar resultats mentre escrius (autocompletar).</li> <li>Rebre dades del servidor en temps real (xat, dashboards).</li> </ul>"},{"location":"tour/ruta/#modul-2-ajax-amb-xmlhttprequest","title":"\ud83d\udd39 M\u00f2dul 2: AJAX amb <code>XMLHttpRequest</code>","text":""},{"location":"tour/ruta/#exemple-get","title":"\u2705 Exemple GET","text":"<pre><code>let xmlHttp = new XMLHttpRequest();\nlet url = \"valida.php?nom=cristian&amp;edat=8\";\n\nxmlHttp.open(\"GET\", url, true);\nxmlHttp.onreadystatechange = function () {\n  if (xmlHttp.readyState === 4 &amp;&amp; xmlHttp.status === 200) {\n    console.log(xmlHttp.responseText);\n  }\n};\nxmlHttp.send(null);\n</code></pre> <p>\ud83d\udd0d Punts clau: - <code>readyState === 4</code>: la resposta s\u2019ha completat. - <code>status === 200</code>: tot ha anat b\u00e9.</p>"},{"location":"tour/ruta/#exemple-post","title":"\u2705 Exemple POST","text":"<pre><code>let xmlHttp = new XMLHttpRequest();\nxmlHttp.open(\"POST\", \"valida.php\", true);\nxmlHttp.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\nxmlHttp.onreadystatechange = function () {\n  if (xmlHttp.readyState === 4 &amp;&amp; xmlHttp.status === 200) {\n    console.log(xmlHttp.responseText);\n  }\n};\nxmlHttp.send(\"nom=cristian&amp;edat=88\");\n</code></pre>"},{"location":"tour/ruta/#modul-3-ajax-amb-fetch","title":"\ud83d\udd39 M\u00f2dul 3: AJAX amb <code>fetch()</code>","text":""},{"location":"tour/ruta/#exemple-get_1","title":"\u2705 Exemple GET","text":"<pre><code>fetch(\"valida.php?nom=cristian&amp;edat=8\", {\n  method: \"GET\",\n  headers: {\n    'Content-Type': 'application/x-www-form-urlencoded'\n  }\n})\n.then(response =&gt; response.json())\n.then(data =&gt; console.log(data))\n.catch(error =&gt; console.log(\"Error:\", error));\n</code></pre>"},{"location":"tour/ruta/#exemple-post_1","title":"\u2705 Exemple POST","text":"<pre><code>fetch(\"valida.php\", {\n  method: \"POST\",\n  body: \"nom=cristian&amp;edat=88\",\n  headers: {\n    'Content-Type': 'application/x-www-form-urlencoded'\n  }\n})\n.then(response =&gt; response.json())\n.then(data =&gt; console.log(data))\n.catch(error =&gt; console.log(\"Error:\", error));\n</code></pre>"},{"location":"tour/ruta/#modul-4-enviament-de-fitxers-amb-formdata","title":"\ud83d\udd39 M\u00f2dul 4: Enviament de fitxers amb <code>FormData</code>","text":""},{"location":"tour/ruta/#amb-xmlhttprequest","title":"Amb <code>XMLHttpRequest</code>:","text":"<pre><code>let form = new FormData();\nform.append(\"arxiu\", document.getElementById(\"arxius\").files[0]);\n\nlet xmlHttp = new XMLHttpRequest();\nxmlHttp.open(\"POST\", \"ajax.php\", true);\nxmlHttp.send(form);\n</code></pre>"},{"location":"tour/ruta/#amb-fetch","title":"Amb <code>fetch()</code>:","text":"<pre><code>let form = new FormData();\nform.append(\"arxiu\", document.getElementById(\"arxiu\").files[0]);\n\nfetch(\"http://localhost:8089/endpoint\", {\n  method: \"POST\",\n  body: form\n})\n.then(response =&gt; response.json())\n.then(data =&gt; console.log(data));\n</code></pre>"},{"location":"tour/ruta/#modul-5-comparativa-xmlhttprequest-vs-fetch","title":"\ud83d\udd39 M\u00f2dul 5: Comparativa <code>XMLHttpRequest</code> vs <code>fetch()</code>","text":"Caracter\u00edstica <code>XMLHttpRequest</code> <code>fetch()</code> Basat en Callbacks Promeses (<code>.then()</code>, <code>.catch()</code>) Sintaxi Verbosa Clara i moderna Gesti\u00f3 d'errors Manual amb <code>status</code> i <code>readyState</code> M\u00e9s simple amb <code>.catch()</code> Suport JSON Manual (<code>JSON.parse()</code>) Integrat (<code>response.json()</code>) Cancel\u00b7laci\u00f3 \u274c \u2705 Amb <code>AbortController</code>"},{"location":"tour/ruta/#modul-6-errors-habituals","title":"\ud83d\udd39 M\u00f2dul 6: Errors habituals","text":"<ul> <li>\u274c Oblidar <code>setRequestHeader</code> en POST amb <code>XMLHttpRequest</code>.</li> <li>\u274c No verificar <code>response.ok</code> amb <code>fetch()</code>.</li> <li>\u274c Format incorrecte del <code>body</code> en peticions POST.</li> <li>\u274c Error CORS: falta l\u2019encap\u00e7alament al servidor.</li> </ul>"},{"location":"tour/ruta/#modul-7-exercici-practic","title":"\ud83d\udd1a M\u00f2dul 7: Exercici pr\u00e0ctic","text":"<ol> <li>Crea una p\u00e0gina amb un <code>&lt;form&gt;</code> per enviar el nom d\u2019un usuari.</li> <li>Captura el <code>submit</code> amb JavaScript.</li> <li>Envia el nom al servidor amb <code>fetch()</code> o <code>XMLHttpRequest</code>.</li> <li>Mostra la resposta del servidor (text, JSON o XML) dins un <code>&lt;div&gt;</code>.</li> </ol> <p>Vols que et generi una plantilla HTML + JS per aquest exercici final?</p>"}]}